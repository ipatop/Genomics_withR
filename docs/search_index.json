[
["index.html", "02-introduction-to-R Overview 0.1 Course Aims 0.2 Intended Learning Outcomes", " 02-introduction-to-R Ines Lucia Patop: inespatop@brandeis.edu 2020-03-29 Overview The idea of the practical part will be to give you tools to be able to manage regular data-analysis in molecular biology labs. Also we think that this training in basic programing and statistics will be of high value for your future projects. 0.1 Course Aims Learn basic coding intuition and usage of R for analysis and plots. Undestand the main issues we have to deal with in Genomics. Learn how to do basic analysis, Chipseq, RNAseq, SingleCell. 0.2 Intended Learning Outcomes By the end of this course students will be able to: Create your own R code. Do basic and complex analysis. Read and understand code. "],
["introduction-to-r-and-rstudio.html", "Lab 1 Introduction to R and RStudio 1.1 Objectives 1.2 Introduction 1.3 RStudio world 1.4 Create a project 1.5 Useful shortcuts in RStudio: 1.6 Installing and loading packages 1.7 Creating objects 1.8 R as a calculator 1.9 Functions 1.10 Loops 1.11 Conditions 1.12 Useful resources 1.13 Activity:", " Lab 1 Introduction to R and RStudio 1.1 Objectives After this section you should be able to: Create projects and scripts in RStudio Install and load packages Do basic statistical analysis and plots Create basic for loops and if conditionals 1.2 Introduction We will be working with R and Rstudio, a user-friendly platform to use R. So, first you will need to download both R and RStudio. R is open-source and free programing language. This means that everybody, and I mean all of us, can collaborate, create packages and share things with others. This also means that everything we make in R is for public use and that, vice versa, we can use everything that anybody did in R. R is “object-orientated” a programing language. This basically means that most of the “things” in the environment are objects. I will not go deeper into it, but you can read more here. You will see in this class different types of objects. Each type of object has different properties which means we can not do everything with each type of object. In this class we will give you some data and simple tasks so you can start playing around and get use to basic commands and operators. But first, we will need to establish some common language: Let’s try to see some of the definitions more commonly used so we can understand them. I recommend you to do some research on your own. Shell or Terminal: the computer shell is a user interface to access to an operating system’s services. In linux and mac is easier to access. You can read more here. Programing language: is a language in a wide sense, ie, it is a set of rules in which you can give orders to the computer. A computer basically, computes. Yes, that is why they are called computers. Then, you can use your computer as a calculator, as a table manager, to write text, etc. The idea is that if you know the language of a programing language you can tell your computer to do stuff for you. We will use R language. Script: a text file that has the code (text in the programing language you are using) you will execute in the computer. In order for this to be executed you need to “copy-paste” the parts of code you wanna run into the shell. We will work in R-studio so this is done automatically with the ctr-enter command. Working Directory: in which folder (or directory) of your computer you will be running the code. As default R will run in your base-directory. This is the core of your computer. I recommend you to have a specific folder inside the documents folder with each of you projects and to run everything there. We will learn also how to set this up. Environment: All the objects, functions and everything you have loaded at that moment. This is a short-term memory thing. If we do not save this, everything we did will be deleted after we close the program. It would be like the words you have a in a text file if you do not save the file they will be lost. Functions: as mathematical functions, this takes inputs and generates outputs. We will see some in this class. For loop, if, else: this are basic logic operators that allows us to generate specific outputs. We can use it inside functions or as independent. Package: R has the option to load many premade functions. The R package is a set of documented functions that someone did and put to be available for the rest of the community. We will use in this course many of them like: DeSeq2, ggplot2, etc. 1.3 RStudio world R Studio has everything integrated. You can have the script, the environment, the actual shell and a useful window to access data and to view the plots and see the manual and description of every function and package. Here we can create a project in which everything will be integrated. This might not be the most efficient thing in terms of memory use but is the simplest for now. When you start to understand the logic of the programing language I encourage you to run R in different supports like typing “R” in your computer shell and run directly from command line. Regarding RStudio see the image bellow: Upper left panel: the script. Everything you write here you can just execute by pressing CTR + ENTER. Upper right panel: the environment. Down left panel: the “console”, work exactly as the terminal. Is the representation of the terminal just for R. If you want, you can run other things that are not R in the shell (not the console), if you are interested read this nice article https://support.rstudio.com/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal Down Right: The multi panel that allows you to see and browse the files, plots and help pages. 1.4 Create a project Open RStudio: Create a project: File &gt; New Project… &gt; Existing Directory &gt; choose the folder. Automatically this should change the working directory to this folder. However, it is nice to check this we should run the following command: getwd() #Get working directory Create the script: File &gt; New File… &gt;R Script Now we can start putting things in the script and running them in the “console” or representation of the shell in RStudio. So, let’s check the working directory and change it if needed. To run the command, just write “getwd()” and press CTR+ENTER. This should generate this in the “Console”: getwd() [1] &quot;/Users/skl/Documents/Class/0_class&quot; #here your working directory Now we know how to run things in RStudio. Save the script and the working directory: when you close the project it will automatically ask. I recommend to save at least the script everytime you can. File &gt; save 1.5 Useful shortcuts in RStudio: tab: auto-complete function control + the up arrow or command + up arrow: auto-complete tool that works only in the interactive console control + enter or command + enter: executes the selected lines of code control + s : save 1.6 Installing and loading packages When we open R the basic package with all the basic functions is loaded but we will use other functions from other packages. For now, we will start with ggplot2. This is not installed in our computer yet so we have to install it. This is done only ONCE in the computer. Then we need to load it in the current environment. This is done EVERY TIME we reopen R. install.packages(&quot;ggplot2&quot;) #only once library(&quot;ggplot2&quot;) #everytime we reopen R session You might have noticed that I use “#” this a good way to add comments to the code. Any line that begins with a “#” will NOT be executed. We will be using packages that are part of Bioconductor. This is a big repository for biological relevant packages. They are installed in this way: if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) #only once BiocManager::install(&quot;DESeq2&quot;) #only once library(&quot;DESeq2&quot;) 1.7 Creating objects Objects in R are created using the assign symbols: &lt;- and = as follows: object.name &lt;- Object.Assingnemet. This means that objects names should start with a letter and should NOT contain spaces. You can replace them with a dot or an underscore. Objects can be of different class and will be overwritten without any warnings. If we execute the object name we will access it as better as the Console can do it. x&lt;-0.5 x class(x) #this tells us the class of the x object x&lt;-1 #this is overwriting x x class(x) #this tells us the class of the x object y&lt;-2.3 y class(y) ## [1] 0.5 ## [1] &quot;numeric&quot; ## [1] 1 ## [1] &quot;numeric&quot; ## [1] 2.3 ## [1] &quot;numeric&quot; 1.8 R as a calculator R will operate as a calculator for numbers. It has a lot of prebuilt functions. Let’s see one obvious. x+y (x+y)/2 z&lt;-x+y #we can now apply this sum a new object z/2 mean(c(x,y))#what is this c()???? #to create a vector of numbers (or anything), you can just use c(n1,n2), you can also store this vector in a new object v&lt;-c(x,y) v class(v) mean(v) t&lt;-c(v,5) t mean(t) #...and so on ## [1] 3.3 ## [1] 1.65 ## [1] 1.65 ## [1] 1.65 ## [1] 1.0 2.3 ## [1] &quot;numeric&quot; ## [1] 1.65 ## [1] 1.0 2.3 5.0 ## [1] 2.766667 1.9 Functions We can think as functions exactly as we know mathematical functions. They take an input and generate an output. \\[ y=f(x) \\] \\[ output=function(input) \\] In R language that looks like this: nameofunction&lt;-function(x){ what the function does } and the can do literally anything R can do. Math, plot, modify tables, etc. Lets create a new mean function. We will call is mean.us. This will take the mean of two numbers. They will be called n1 and n2. mean.us&lt;-function(n1,n2){ y&lt;-((n1+n2)/2) return(y) #return is the one part of this function that actually makes it to return a value } #lets see if this works mean.us(2,3) #We can make it even more fancy and print a message mean.us&lt;-function(n1,n2){ y&lt;-((n1+n2)/2) return(paste0(&quot;The mean of &quot;,n1,&quot; and &quot;,n2,&quot; is: &quot;,y)) } mean.us(2,3) #we can do now the mean plus 1 mean.plus1&lt;-function(n1,n2){ y&lt;-((n1+n2)/2+1) return(paste0(&quot;The mean of &quot;,n1,&quot; and &quot;,n2,&quot; plus one is: &quot;,y)) } mean.plus1(2,3) ## [1] 2.5 ## [1] &quot;The mean of 2 and 3 is: 2.5&quot; ## [1] &quot;The mean of 2 and 3 plus one is: 3.5&quot; 1.10 Loops Loops are useful to apply a function or an action to multiple objects. We will see for loops but be aware that another common loop type is the while loop. For loops will go over each element of a vector or list provided. In R language they look like this: for (x in vector) { DO SOMETHING }. And it literally means that it will go over each element of the vector, each time x will take the value of the element it goes that time and will do something. #i this is a little complex so lets go one step at a time: i is an object that will be getting the value of each elemnt we go thru for(x in c(1,2,3,4)){ print(paste0(&quot;x is: &quot;,x)) } #We can not do something for(x in c(1,2,3,4)){ c=x/2 print(paste0(&quot;c is: &quot;,c)) } #t is mande of many elements already t #if we want to sum 1 to each element in t and print it out we can do as follows for(i in t){ print(i) c=i+1 print(c) } ## [1] &quot;x is: 1&quot; ## [1] &quot;x is: 2&quot; ## [1] &quot;x is: 3&quot; ## [1] &quot;x is: 4&quot; ## [1] &quot;c is: 0.5&quot; ## [1] &quot;c is: 1&quot; ## [1] &quot;c is: 1.5&quot; ## [1] &quot;c is: 2&quot; ## [1] 1.0 2.3 5.0 ## [1] 1 ## [1] 2 ## [1] 2.3 ## [1] 3.3 ## [1] 5 ## [1] 6 1.11 Conditions R assigns using = and compares using ==,&lt; and &gt;. It can then use if and else to generate conditions and actions. This can be more complex by adding AND, OR gates with &amp; and | respectively. x=1 #lets explore x x x==1 x&lt;2 x&gt;2 if (x &lt; 2){ c=x+1 print(paste0(&quot;c is: &quot;, c)) } else { print(&quot;x is too big&quot;) } #change the condition if (x &lt; 1){ c=x+1 print(paste0(&quot;c is: &quot;, c)) } else { print(&quot;x is too big&quot;) } ## [1] 1 ## [1] TRUE ## [1] TRUE ## [1] FALSE ## [1] &quot;c is: 2&quot; ## [1] &quot;x is too big&quot; 1.12 Useful resources R for data science: https://r4ds.had.co.nz A package to learn R 1.13 Activity: Create a new funciton that has inside a for loop and other that has an if/else condition. plus.one.onlyifpos &lt;- function(n){ if(n &gt; 0){ return(n+1) } else { return(&quot;number is negative&quot;) } } plus.one.onlyifpos(20) plus.one.onlyifpos(-20) "],
["data-manipulation.html", "Lab 2 Data manipulation 2.1 Objectives 2.2 Introduction 2.3 Load data 2.4 Data exploration 2.5 Subsetting 2.6 Visualization 2.7 Statistical test 2.8 Resources", " Lab 2 Data manipulation 2.1 Objectives After this section you should be able to: Do data manipulation Do basic statistical analysis and plots 2.2 Introduction One of the main uses of R is for data manipulation and plot. This is similar to what many of us do in any regular table editor as excel or google spread sheet. We will use the following packages. You can read in detail the manual of each of them. #Install packages #install.packages(&quot;ggplot2&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;plyr&quot;) #Load the package library(&quot;ggplot2&quot;) library(&quot;dplyr&quot;) library(&quot;plyr&quot;) library(RColorBrewer) #Manuals #vignette(&quot;dplyr&quot;) #?ggplot2 #?plyr 2.3 Load data The package datasets provides a handful set of data to analyze. We will use the ChickWeight dataset. This is data set of weight in chickens with age an different diet. This will allow us to visualize the data and to do some statistic tests. # Install the package #install.packages(&quot;datasets&quot;) # For a full list of these datasets, type library(help = &quot;datasets&quot;) # Load the library and dataset library(datasets) data(ChickWeight) #What happens in the Environment section of RStudio? 2.4 Data exploration It is important to understand the data before heading into the analysis. We will go over some techniques for this. # To see the table you can click on the environment part or run this... #View(ChickWeight) # As you can see this is a table, just in case we want to convert it to a data.frame ChickWeight&lt;-as.data.frame(ChickWeight) # To see only the beginning, we can use the head function: head(ChickWeight) head(ChickWeight,n = 20) #what is n doing? # This is the structure of the data.frame str(ChickWeight) #with the $ operator we can explore the columns class(ChickWeight$weight) class(ChickWeight$Diet) # we can see the dimensions of the table for example: how many rows it has nrow(ChickWeight) #how many columns ncol(ChickWeight) #names of columns names(ChickWeight) names(ChickWeight)[3] # we can see the levels of a factor levels(ChickWeight$Diet) #what is the difference if we just print the column? ChickWeight$Diet #can we see the levels of a numeric vector? levels(ChickWeight$weight) # nop ChickWeight$weight mean(ChickWeight$weight) #we can now get different basic statistics summary(ChickWeight$weight) summary(ChickWeight) #To see what is this exactly doing, just go to the help page: ?summary #to save this summary table we can create an object with just the result of the summary chick_sumary&lt;-summary(ChickWeight) chick_sumary #this is not available in the Data part, this is because it is a table, not a data.frame class(chick_sumary) #we can change the data kind, and assign it to a different object chick_sumary_df&lt;-as.data.frame(chick_sumary) #this is not that useful as you can see, this is because it is a complicated format, we better just save the table write.table(chick_sumary, &quot;mydata.txt&quot;, sep=&quot;\\t&quot;,row.names = F,col.names = T) #this is clearly no perfect but for the important part, the numeric and integer columns, we have the stat ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 ## 7 106 12 1 1 ## 8 125 14 1 1 ## 9 149 16 1 1 ## 10 171 18 1 1 ## 11 199 20 1 1 ## 12 205 21 1 1 ## 13 40 0 2 1 ## 14 49 2 2 1 ## 15 58 4 2 1 ## 16 72 6 2 1 ## 17 84 8 2 1 ## 18 103 10 2 1 ## 19 122 12 2 1 ## 20 138 14 2 1 ## &#39;data.frame&#39;: 578 obs. of 4 variables: ## $ weight: num 42 51 59 64 76 93 106 125 149 171 ... ## $ Time : num 0 2 4 6 8 10 12 14 16 18 ... ## $ Chick : Ord.factor w/ 50 levels &quot;18&quot;&lt;&quot;16&quot;&lt;&quot;15&quot;&lt;..: 15 15 15 15 15 15 15 15 15 15 ... ## $ Diet : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## [1] &quot;numeric&quot; ## [1] &quot;factor&quot; ## [1] 578 ## [1] 4 ## [1] &quot;weight&quot; &quot;Time&quot; &quot;Chick&quot; &quot;Diet&quot; ## [1] &quot;Chick&quot; ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ## [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ## [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 ## [223] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [260] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [297] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 ## [334] 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [371] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [408] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [445] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [482] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [519] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [556] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## Levels: 1 2 3 4 ## NULL ## [1] 42 51 59 64 76 93 106 125 149 171 199 205 40 49 58 72 84 103 ## [19] 122 138 162 187 209 215 43 39 55 67 84 99 115 138 163 187 198 202 ## [37] 42 49 56 67 74 87 102 108 136 154 160 157 41 42 48 60 79 106 ## [55] 141 164 197 199 220 223 41 49 59 74 97 124 141 148 155 160 160 157 ## [73] 41 49 57 71 89 112 146 174 218 250 288 305 42 50 61 71 84 93 ## [91] 110 116 126 134 125 42 51 59 68 85 96 90 92 93 100 100 98 41 ## [109] 44 52 63 74 81 89 96 101 112 120 124 43 51 63 84 112 139 168 ## [127] 177 182 184 181 175 41 49 56 62 72 88 119 135 162 185 195 205 41 ## [145] 48 53 60 65 67 71 70 71 81 91 96 41 49 62 79 101 128 164 ## [163] 192 227 248 259 266 41 49 56 64 68 68 67 68 41 45 49 51 57 ## [181] 51 54 42 51 61 72 83 89 98 103 113 123 133 142 39 35 43 48 ## [199] 55 62 65 71 82 88 106 120 144 157 41 47 54 58 65 73 77 89 ## [217] 98 107 115 117 40 50 62 86 125 163 217 240 275 307 318 331 41 55 ## [235] 64 77 90 95 108 111 131 148 164 167 43 52 61 73 90 103 127 135 ## [253] 145 163 170 175 42 52 58 74 66 68 70 71 72 72 76 74 40 49 ## [271] 62 78 102 124 146 164 197 231 259 265 42 48 57 74 93 114 136 147 ## [289] 169 205 236 251 39 46 58 73 87 100 115 123 144 163 185 192 39 46 ## [307] 58 73 92 114 145 156 184 207 212 233 39 48 59 74 87 106 134 150 ## [325] 187 230 279 309 42 48 59 72 85 98 115 122 143 151 157 150 42 53 ## [343] 62 73 85 102 123 138 170 204 235 256 41 49 65 82 107 129 159 179 ## [361] 221 263 291 305 39 50 63 77 96 111 137 144 151 146 156 147 41 49 ## [379] 63 85 107 134 164 186 235 294 327 341 41 53 64 87 123 158 201 238 ## [397] 287 332 361 373 39 48 61 76 98 116 145 166 198 227 225 220 41 48 ## [415] 56 68 80 83 103 112 135 157 169 178 41 49 61 74 98 109 128 154 ## [433] 192 232 280 290 42 50 61 78 89 109 130 146 170 214 250 272 41 55 ## [451] 66 79 101 120 154 182 215 262 295 321 42 51 66 85 103 124 155 153 ## [469] 175 184 199 204 42 49 63 84 103 126 160 174 204 234 269 281 42 55 ## [487] 69 96 131 157 184 188 197 198 199 200 42 51 65 86 103 118 127 138 ## [505] 145 146 41 50 61 78 98 117 135 141 147 174 197 196 40 52 62 82 ## [523] 101 120 144 156 173 210 231 238 41 53 66 79 100 123 148 157 168 185 ## [541] 210 205 39 50 62 80 104 125 154 170 222 261 303 322 40 53 64 85 ## [559] 108 128 152 166 184 203 233 237 41 54 67 84 105 122 155 175 205 234 ## [577] 264 264 ## [1] 121.8183 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 35.0 63.0 103.0 121.8 163.8 373.0 ## weight Time Chick Diet ## Min. : 35.0 Min. : 0.00 13 : 12 1:220 ## 1st Qu.: 63.0 1st Qu.: 4.00 9 : 12 2:120 ## Median :103.0 Median :10.00 20 : 12 3:120 ## Mean :121.8 Mean :10.72 10 : 12 4:118 ## 3rd Qu.:163.8 3rd Qu.:16.00 17 : 12 ## Max. :373.0 Max. :21.00 19 : 12 ## (Other):506 ## weight Time Chick Diet ## Min. : 35.0 Min. : 0.00 13 : 12 1:220 ## 1st Qu.: 63.0 1st Qu.: 4.00 9 : 12 2:120 ## Median :103.0 Median :10.00 20 : 12 3:120 ## Mean :121.8 Mean :10.72 10 : 12 4:118 ## 3rd Qu.:163.8 3rd Qu.:16.00 17 : 12 ## Max. :373.0 Max. :21.00 19 : 12 ## (Other):506 ## [1] &quot;table&quot; 2.5 Subsetting Subsetting means extracting part of the data. There are many different ways to do this. One important notion for tables and data frames is that dimensions go as follows: data[row,column] #we can see specific columns and rows ChickWeight[1,] #row 1 ChickWeight[,1] #col 1 ChickWeight[1,1] #row1, col1 #if we want to know for example only the data from the chickens taking the diet 4 ChickWeight[ChickWeight$Diet==4,] #why == and no =? #in R, = is an assignment, as the &lt;-, while the == is for comparison, lests write ChickWeight$Diet==4 #and class(ChickWeight$Diet==4) #so, when we do ChickWeight[ChickWeight$Diet==4,], R is just showing the ChickWeight for which ChickWeight$Diet==4 is TRUE which(ChickWeight$Diet==4) ChickWeight[ChickWeight$Diet==4,] #and for more conditions: ChickWeight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6,] ChickWeight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6 &amp; ChickWeight$Time&lt;20,] #and if I just want the weights of these... #ChickWeight$weight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6 &amp; ChickWeight$Time&lt;20,] # why this gives an error? because we only have one dimention now, no 2 ChickWeight$weight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6 &amp; ChickWeight$Time&lt;20] ## weight Time Chick Diet ## 1 42 0 1 1 ## [1] 42 51 59 64 76 93 106 125 149 171 199 205 40 49 58 72 84 103 ## [19] 122 138 162 187 209 215 43 39 55 67 84 99 115 138 163 187 198 202 ## [37] 42 49 56 67 74 87 102 108 136 154 160 157 41 42 48 60 79 106 ## [55] 141 164 197 199 220 223 41 49 59 74 97 124 141 148 155 160 160 157 ## [73] 41 49 57 71 89 112 146 174 218 250 288 305 42 50 61 71 84 93 ## [91] 110 116 126 134 125 42 51 59 68 85 96 90 92 93 100 100 98 41 ## [109] 44 52 63 74 81 89 96 101 112 120 124 43 51 63 84 112 139 168 ## [127] 177 182 184 181 175 41 49 56 62 72 88 119 135 162 185 195 205 41 ## [145] 48 53 60 65 67 71 70 71 81 91 96 41 49 62 79 101 128 164 ## [163] 192 227 248 259 266 41 49 56 64 68 68 67 68 41 45 49 51 57 ## [181] 51 54 42 51 61 72 83 89 98 103 113 123 133 142 39 35 43 48 ## [199] 55 62 65 71 82 88 106 120 144 157 41 47 54 58 65 73 77 89 ## [217] 98 107 115 117 40 50 62 86 125 163 217 240 275 307 318 331 41 55 ## [235] 64 77 90 95 108 111 131 148 164 167 43 52 61 73 90 103 127 135 ## [253] 145 163 170 175 42 52 58 74 66 68 70 71 72 72 76 74 40 49 ## [271] 62 78 102 124 146 164 197 231 259 265 42 48 57 74 93 114 136 147 ## [289] 169 205 236 251 39 46 58 73 87 100 115 123 144 163 185 192 39 46 ## [307] 58 73 92 114 145 156 184 207 212 233 39 48 59 74 87 106 134 150 ## [325] 187 230 279 309 42 48 59 72 85 98 115 122 143 151 157 150 42 53 ## [343] 62 73 85 102 123 138 170 204 235 256 41 49 65 82 107 129 159 179 ## [361] 221 263 291 305 39 50 63 77 96 111 137 144 151 146 156 147 41 49 ## [379] 63 85 107 134 164 186 235 294 327 341 41 53 64 87 123 158 201 238 ## [397] 287 332 361 373 39 48 61 76 98 116 145 166 198 227 225 220 41 48 ## [415] 56 68 80 83 103 112 135 157 169 178 41 49 61 74 98 109 128 154 ## [433] 192 232 280 290 42 50 61 78 89 109 130 146 170 214 250 272 41 55 ## [451] 66 79 101 120 154 182 215 262 295 321 42 51 66 85 103 124 155 153 ## [469] 175 184 199 204 42 49 63 84 103 126 160 174 204 234 269 281 42 55 ## [487] 69 96 131 157 184 188 197 198 199 200 42 51 65 86 103 118 127 138 ## [505] 145 146 41 50 61 78 98 117 135 141 147 174 197 196 40 52 62 82 ## [523] 101 120 144 156 173 210 231 238 41 53 66 79 100 123 148 157 168 185 ## [541] 210 205 39 50 62 80 104 125 154 170 222 261 303 322 40 53 64 85 ## [559] 108 128 152 166 184 203 233 237 41 54 67 84 105 122 155 175 205 234 ## [577] 264 264 ## [1] 42 ## weight Time Chick Diet ## 461 42 0 41 4 ## 462 51 2 41 4 ## 463 66 4 41 4 ## 464 85 6 41 4 ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 471 199 20 41 4 ## 472 204 21 41 4 ## 473 42 0 42 4 ## 474 49 2 42 4 ## 475 63 4 42 4 ## 476 84 6 42 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 483 269 20 42 4 ## 484 281 21 42 4 ## 485 42 0 43 4 ## 486 55 2 43 4 ## 487 69 4 43 4 ## 488 96 6 43 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 495 199 20 43 4 ## 496 200 21 43 4 ## 497 42 0 44 4 ## 498 51 2 44 4 ## 499 65 4 44 4 ## 500 86 6 44 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 507 41 0 45 4 ## 508 50 2 45 4 ## 509 61 4 45 4 ## 510 78 6 45 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 517 197 20 45 4 ## 518 196 21 45 4 ## 519 40 0 46 4 ## 520 52 2 46 4 ## 521 62 4 46 4 ## 522 82 6 46 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 529 231 20 46 4 ## 530 238 21 46 4 ## 531 41 0 47 4 ## 532 53 2 47 4 ## 533 66 4 47 4 ## 534 79 6 47 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 541 210 20 47 4 ## 542 205 21 47 4 ## 543 39 0 48 4 ## 544 50 2 48 4 ## 545 62 4 48 4 ## 546 80 6 48 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 553 303 20 48 4 ## 554 322 21 48 4 ## 555 40 0 49 4 ## 556 53 2 49 4 ## 557 64 4 49 4 ## 558 85 6 49 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 565 233 20 49 4 ## 566 237 21 49 4 ## 567 41 0 50 4 ## 568 54 2 50 4 ## 569 67 4 50 4 ## 570 84 6 50 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## 577 264 20 50 4 ## 578 264 21 50 4 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [229] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [241] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [253] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [265] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [277] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [289] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [301] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [313] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [325] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [337] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [349] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [361] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [373] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [385] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [397] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [409] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [421] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [433] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [445] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [457] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [469] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [481] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [493] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [505] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [517] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [529] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [541] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [553] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [565] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [577] TRUE TRUE ## [1] &quot;logical&quot; ## [1] 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 ## [19] 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 ## [37] 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 ## [55] 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 ## [73] 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 ## [91] 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 ## [109] 569 570 571 572 573 574 575 576 577 578 ## weight Time Chick Diet ## 461 42 0 41 4 ## 462 51 2 41 4 ## 463 66 4 41 4 ## 464 85 6 41 4 ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 471 199 20 41 4 ## 472 204 21 41 4 ## 473 42 0 42 4 ## 474 49 2 42 4 ## 475 63 4 42 4 ## 476 84 6 42 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 483 269 20 42 4 ## 484 281 21 42 4 ## 485 42 0 43 4 ## 486 55 2 43 4 ## 487 69 4 43 4 ## 488 96 6 43 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 495 199 20 43 4 ## 496 200 21 43 4 ## 497 42 0 44 4 ## 498 51 2 44 4 ## 499 65 4 44 4 ## 500 86 6 44 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 507 41 0 45 4 ## 508 50 2 45 4 ## 509 61 4 45 4 ## 510 78 6 45 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 517 197 20 45 4 ## 518 196 21 45 4 ## 519 40 0 46 4 ## 520 52 2 46 4 ## 521 62 4 46 4 ## 522 82 6 46 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 529 231 20 46 4 ## 530 238 21 46 4 ## 531 41 0 47 4 ## 532 53 2 47 4 ## 533 66 4 47 4 ## 534 79 6 47 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 541 210 20 47 4 ## 542 205 21 47 4 ## 543 39 0 48 4 ## 544 50 2 48 4 ## 545 62 4 48 4 ## 546 80 6 48 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 553 303 20 48 4 ## 554 322 21 48 4 ## 555 40 0 49 4 ## 556 53 2 49 4 ## 557 64 4 49 4 ## 558 85 6 49 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 565 233 20 49 4 ## 566 237 21 49 4 ## 567 41 0 50 4 ## 568 54 2 50 4 ## 569 67 4 50 4 ## 570 84 6 50 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## 577 264 20 50 4 ## 578 264 21 50 4 ## weight Time Chick Diet ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 471 199 20 41 4 ## 472 204 21 41 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 483 269 20 42 4 ## 484 281 21 42 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 495 199 20 43 4 ## 496 200 21 43 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 517 197 20 45 4 ## 518 196 21 45 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 529 231 20 46 4 ## 530 238 21 46 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 541 210 20 47 4 ## 542 205 21 47 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 553 303 20 48 4 ## 554 322 21 48 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 565 233 20 49 4 ## 566 237 21 49 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## 577 264 20 50 4 ## 578 264 21 50 4 ## weight Time Chick Diet ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## [1] 103 124 155 153 175 184 103 126 160 174 204 234 131 157 184 188 197 198 103 ## [20] 118 127 138 145 146 98 117 135 141 147 174 101 120 144 156 173 210 100 123 ## [39] 148 157 168 185 104 125 154 170 222 261 108 128 152 166 184 203 105 122 155 ## [58] 175 205 234 2.6 Visualization There are many things we can explore in this data. Each question we might want to answer will be better addressed using different plots. For example: 1. If the chickens are older we expect them to be bigger. This can be visualized using a dotplot. 2. We might want to see the distribution of weight separated by diet. This can be addressed by a histogram. ggplot is a very useful function that allows us to manipulate the colors, the plot type, etc. I know it can be difficult to understand it at the beginning but after a while it becomes really intuitive. # Columns we can plot names(ChickWeight) # Dot plot with basic qplot (from ggplot but les complex) qplot(data=ChickWeight,x = weight, y=Time, geom = c(&quot;line&quot;,&quot;point&quot;)) Figure 2.1: CAPTION THIS FIGURE!! qplot(data=ChickWeight,x = weight, y=Time, geom = c(&quot;line&quot;,&quot;point&quot;), colour=Diet) #adding the color helps to separate the data Figure 2.2: CAPTION THIS FIGURE!! #the same using ggplot ggplot(data = ChickWeight, aes(x = weight, y=Time,colour=Diet))+ #data and basic things about the plot geom_point() + #add the type of plot scale_colour_brewer(palette = &quot;Set1&quot;) #add a colot pallet Figure 2.3: CAPTION THIS FIGURE!! # Historgam and density qplot(data = ChickWeight,x=weight, binwith=10, colour=Diet) Figure 2.4: CAPTION THIS FIGURE!! qplot(data = ChickWeight,x=weight, geom = &quot;density&quot;, colour=Diet) Figure 2.5: CAPTION THIS FIGURE!! ggplot(data = ChickWeight, aes(x=weight,color=Diet))+ geom_histogram(fill=&quot;white&quot;, alpha=0.5, position=&quot;identity&quot;)+ scale_colour_brewer(palette = &quot;Set1&quot;) Figure 2.6: CAPTION THIS FIGURE!! ggplot(data = ChickWeight, aes(x=weight,fill=Diet))+ geom_density( alpha=0.5)+ scale_colour_brewer(palette = &quot;Set1&quot;) Figure 2.7: CAPTION THIS FIGURE!! # Boxplot ggplot(data = ChickWeight, aes(y=weight,x=as.factor(Time),fill=Diet))+ #Note how the x, y and color changes geom_boxplot()+ #this is a boxplot scale_colour_brewer(palette = &quot;Set1&quot;) Figure 2.8: CAPTION THIS FIGURE!! # It seems interesting to separate this by age (Time). This is achieved by another layer named facet ggplot(data = ChickWeight, aes(x=weight,fill=Diet))+ geom_density( alpha=0.5)+ scale_colour_brewer(palette = &quot;Set1&quot;)+ facet_wrap(~Time,scales = &quot;free&quot;) Figure 2.9: CAPTION THIS FIGURE!! ggplot(data = ChickWeight, aes(y=weight,x=as.factor(Time),fill=Diet))+ geom_boxplot()+scale_colour_brewer(palette = &quot;Set1&quot;)+ facet_wrap(~Time,scales = &quot;free&quot;) Figure 2.10: CAPTION THIS FIGURE!! ggplot(data = ChickWeight, aes(y=weight,x=as.factor(Time),fill=Diet))+ geom_violin()+ scale_colour_brewer(palette = &quot;Set1&quot;)+ facet_wrap(~Time,scales = &quot;free&quot;) Figure 2.11: CAPTION THIS FIGURE!! ## [1] &quot;weight&quot; &quot;Time&quot; &quot;Chick&quot; &quot;Diet&quot; 2.7 Statistical test 2.8 Resources Statistics with R: https://cran.r-project.org/doc/contrib/Seefeld_StatsRBio.pdf Stat and plots with R: http://www.sthda.com/english/ "]
]
