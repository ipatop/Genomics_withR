[
["index.html", "02 Data manipulation in R Overview 0.1 Course Aims 0.2 Intended Learning Outcomes", " 02 Data manipulation in R Ines Lucia Patop: inespatop@brandeis.edu 2020-03-30 Overview The idea of the practical part will be to give you tools to be able to manage regular data-analysis in molecular biology labs. Also we think that this training in basic programing and statistics will be of high value for your future projects. 0.1 Course Aims Learn basic coding intuition and usage of R for analysis and plots. Undestand the main issues we have to deal with in Genomics. Learn how to do basic analysis, Chipseq, RNAseq, SingleCell. 0.2 Intended Learning Outcomes By the end of this course students will be able to: Create your own R code. Do basic and complex analysis. Read and understand code. "],
["introduction-to-r-and-rstudio.html", "Lab 1 Introduction to R and RStudio 1.1 Objectives 1.2 Introduction 1.3 RStudio world 1.4 Create a project 1.5 Useful shortcuts in RStudio: 1.6 Installing and loading packages 1.7 Creating objects 1.8 R as a calculator 1.9 Functions 1.10 Loops 1.11 Conditions 1.12 Character objects 1.13 Identify 1.14 Modify 1.15 Useful resources 1.16 Activity:", " Lab 1 Introduction to R and RStudio 1.1 Objectives After this section you should be able to: Create projects and scripts in RStudio Install and load packages Do basic statistical analysis and plots Create basic for loops and if conditionals 1.2 Introduction We will be working with R and Rstudio, a user-friendly platform to use R. So, first you will need to download both R and RStudio. R is open-source and free programing language. This means that everybody, and I mean all of us, can collaborate, create packages and share things with others. This also means that everything we make in R is for public use and that, vice versa, we can use everything that anybody did in R. R is “object-orientated” a programing language. This basically means that most of the “things” in the environment are objects. I will not go deeper into it, but you can read more here. You will see in this class different types of objects. Each type of object has different properties which means we can not do everything with each type of object. In this class we will give you some data and simple tasks so you can start playing around and get use to basic commands and operators. But first, we will need to establish some common language: Let’s try to see some of the definitions more commonly used so we can understand them. I recommend you to do some research on your own. Shell or Terminal: the computer shell is a user interface to access to an operating system’s services. In linux and mac is easier to access. You can read more here. Programing language: is a language in a wide sense, ie, it is a set of rules in which you can give orders to the computer. A computer basically, computes. Yes, that is why they are called computers. Then, you can use your computer as a calculator, as a table manager, to write text, etc. The idea is that if you know the language of a programing language you can tell your computer to do stuff for you. We will use R language. Script: a text file that has the code (text in the programing language you are using) you will execute in the computer. In order for this to be executed you need to “copy-paste” the parts of code you wanna run into the shell. We will work in R-studio so this is done automatically with the ctr-enter command. Working Directory: in which folder (or directory) of your computer you will be running the code. As default R will run in your base-directory. This is the core of your computer. I recommend you to have a specific folder inside the documents folder with each of you projects and to run everything there. We will learn also how to set this up. Environment: All the objects, functions and everything you have loaded at that moment. This is a short-term memory thing. If we do not save this, everything we did will be deleted after we close the program. It would be like the words you have a in a text file if you do not save the file they will be lost. Functions: as mathematical functions, this takes inputs and generates outputs. We will see some in this class. For loop, if, else: this are basic logic operators that allows us to generate specific outputs. We can use it inside functions or as independent. Package: R has the option to load many premade functions. The R package is a set of documented functions that someone did and put to be available for the rest of the community. We will use in this course many of them like: DeSeq2, ggplot2, etc. 1.3 RStudio world R Studio has everything integrated. You can have the script, the environment, the actual shell and a useful window to access data and to view the plots and see the manual and description of every function and package. Here we can create a project in which everything will be integrated. This might not be the most efficient thing in terms of memory use but is the simplest for now. When you start to understand the logic of the programing language I encourage you to run R in different supports like typing “R” in your computer shell and run directly from command line. Regarding RStudio see the image bellow: Figure 1.1: CAPTION THIS FIGURE!! Upper left panel: the script. Everything you write here you can just execute by pressing CTR + ENTER. Upper right panel: the environment. Down left panel: the “console”, work exactly as the terminal. Is the representation of the terminal just for R. If you want, you can run other things that are not R in the shell (not the console), if you are interested read this nice article https://support.rstudio.com/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal Down Right: The multi panel that allows you to see and browse the files, plots and help pages. 1.4 Create a project Open RStudio: Create a project: File &gt; New Project… &gt; Existing Directory &gt; choose the folder. Automatically this should change the working directory to this folder. However, it is nice to check this we should run the following command: getwd() #Get working directory Create the script: File &gt; New File… &gt;R Script Now we can start putting things in the script and running them in the “console” or representation of the shell in RStudio. So, let’s check the working directory and change it if needed. To run the command, just write “getwd()” and press CTR+ENTER. This should generate this in the “Console”: getwd() [1] &quot;/Users/skl/Documents/Class/0_class&quot; #here your working directory Now we know how to run things in RStudio. Save the script and the working directory: when you close the project it will automatically ask. I recommend to save at least the script everytime you can. File &gt; save 1.5 Useful shortcuts in RStudio: tab: auto-complete function control + the up arrow or command + up arrow: auto-complete tool that works only in the interactive console control + enter or command + enter: executes the selected lines of code control + s : save 1.6 Installing and loading packages When we open R the basic package with all the basic functions is loaded but we will use other functions from other packages. For now, we will start with ggplot2. This is not installed in our computer yet so we have to install it. This is done only ONCE in the computer. Then we need to load it in the current environment. This is done EVERY TIME we reopen R. install.packages(&quot;ggplot2&quot;) #only once library(&quot;ggplot2&quot;) #everytime we reopen R session You might have noticed that I use “#” this a good way to add comments to the code. Any line that begins with a “#” will NOT be executed. We will be using packages that are part of Bioconductor. This is a big repository for biological relevant packages. They are installed in this way: if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) #only once BiocManager::install(&quot;DESeq2&quot;) #only once library(&quot;DESeq2&quot;) 1.7 Creating objects Objects in R are created using the assign symbols: &lt;- and = as follows: object.name &lt;- Object.Assingnemet. This means that objects names should start with a letter and should NOT contain spaces. You can replace them with a dot or an underscore. Objects can be of different class and will be overwritten without any warnings. If we execute the object name we will access it as better as the Console can do it. For numbers it is simple but you will notice that for other objects it is not. x&lt;-0.5 x class(x) #this tells us the class of the x object ## [1] 0.5 ## [1] &quot;numeric&quot; If we assign other thing to x, it will be overwritten: x&lt;-1 #this is overwriting x x class(x) #this tells us the class of the x object ## [1] 1 ## [1] &quot;numeric&quot; We can create as many objects as we want y&lt;-2.3 y class(y) ## [1] 2.3 ## [1] &quot;numeric&quot; 1.8 R as a calculator R will operate as a calculator for numbers. It has a lot of prebuilt functions. Let’s see one obvious. x+y (x+y)/2 ## [1] 3.3 ## [1] 1.65 We can now apply this sum a new object z&lt;-x+y z ## [1] 3.3 And divide it by 2. z/2 ## [1] 1.65 Which is the same as doing the mean of x and y. mean(c(x,y))#what is this c()???? ## [1] 1.65 To create a vector of numbers (or anything), you can just use c(n1,n2), you can also store this vector in a new object. v&lt;-c(x,y) v class(v) ## [1] 1.0 2.3 ## [1] &quot;numeric&quot; You can now use it inside fucntions. mean(v) ## [1] 1.65 We can add (append) more elemts to the vector. t&lt;-c(v,5) t mean(t) #...and so on ## [1] 1.0 2.3 5.0 ## [1] 2.766667 1.9 Functions We can think as functions exactly as we know mathematical functions. They take an input and generate an output. \\[ y=f(x) \\] \\[ output=function(input) \\] In R language that looks like this: nameofunction&lt;-function(x){ what the function does } and the can do literally anything R can do. Math, plot, modify tables, etc. Lets create a new mean function. We will call is mean.us. This will take the mean of two numbers. They will be called n1 and n2. mean.us&lt;-function(n1,n2){ y&lt;-((n1+n2)/2) return(y) #return is the one part of this function that actually makes it to return a value } #lets see if this works mean.us(2,3) ## [1] 2.5 We can make it even more fancy and print a message mean.us&lt;-function(n1,n2){ y&lt;-((n1+n2)/2) return(paste0(&quot;The mean of &quot;,n1,&quot; and &quot;,n2,&quot; is: &quot;,y)) } mean.us(2,3) ## [1] &quot;The mean of 2 and 3 is: 2.5&quot; We can do now the mean plus 1 mean.plus1&lt;-function(n1,n2){ y&lt;-((n1+n2)/2+1) return(paste0(&quot;The mean of &quot;,n1,&quot; and &quot;,n2,&quot; plus one is: &quot;,y)) } mean.plus1(2,3) ## [1] &quot;The mean of 2 and 3 plus one is: 3.5&quot; 1.10 Loops Loops are useful to apply a function or an action to multiple objects. We will see for loops but be aware that another common loop type is the while loop. For loops will go over each element of a vector or list provided. In R language they look like this: for (x in vector) { DO SOMETHING }. And it literally means that it will go over each element of the vector, each time x will take the value of the element it goes that time and will do something. #i this is a little complex so lets go one step at a time: i is an object that will be getting the value of each elemnt we go thru for(x in c(1,2,3,4)){ print(paste0(&quot;x is: &quot;,x)) } ## [1] &quot;x is: 1&quot; ## [1] &quot;x is: 2&quot; ## [1] &quot;x is: 3&quot; ## [1] &quot;x is: 4&quot; We can now do something more complex inside the loop. for(x in c(1,2,3,4)){ c=x/2 print(paste0(&quot;c is: &quot;,c)) } ## [1] &quot;c is: 0.5&quot; ## [1] &quot;c is: 1&quot; ## [1] &quot;c is: 1.5&quot; ## [1] &quot;c is: 2&quot; We can also loop over vectors that are already in our list of objects. #t is mande of many elements already t #if we want to sum 1 to each element in t and print it out we can do as follows for(i in t){ print(i) c=i+1 print(c) } ## [1] 1.0 2.3 5.0 ## [1] 1 ## [1] 2 ## [1] 2.3 ## [1] 3.3 ## [1] 5 ## [1] 6 1.11 Conditions R assigns using = and compares using ==,&lt; and &gt;. It can then use if and else to generate conditions and actions. This can be more complex by adding AND, OR gates with &amp; and | respectively. x=1 #lets explore x x ## [1] 1 Compare, equal to: x==1 ## [1] TRUE Smaller than: x&lt;2 ## [1] TRUE Bigger than: x&gt;2 ## [1] FALSE Apply this comparisons to an if/else: if (x &lt; 2){ c=x+1 print(paste0(&quot;c is: &quot;, c)) } else { print(&quot;x is too big&quot;) } ## [1] &quot;c is: 2&quot; Change the condition: if (x &lt; 1){ c=x+1 print(paste0(&quot;c is: &quot;, c)) } else { print(&quot;x is too big&quot;) } ## [1] &quot;x is too big&quot; 1.12 Character objects So far, we saw opperations with numbers. But R can have objects with words or characters. We can have a complex phrase phrase&lt;-&quot;I am a beatufill phrase. Hello world&quot; phrase ## [1] &quot;I am a beatufill phrase. Hello world&quot; Or a vector of character elements: chrvec&lt;-c(phrase,&quot;abcde&quot;,&quot;67&quot;) chrvec ## [1] &quot;I am a beatufill phrase. Hello world&quot; ## [2] &quot;abcde&quot; ## [3] &quot;67&quot; class(chrvec) ## [1] &quot;character&quot; 1.13 Identify We can operate over them. For example, we can select the elemnt that has certain characteristic. For this we will use grep. This is based on regualar expression. Lets select the elemnts that have the letter d. grep(pattern = &quot;d&quot;,x = chrvec,value = T) ## [1] &quot;I am a beatufill phrase. Hello world&quot; ## [2] &quot;abcde&quot; grep(pattern = &quot;d&quot;,x = chrvec,value = F) #What changed between the previous one and this one? ## [1] 1 2 Clearly, the fist two elements have the letter d. What if we want to select the one that has it at the end? grep(pattern = &quot;d$&quot;,x = chrvec,value = T) ## [1] &quot;I am a beatufill phrase. Hello world&quot; The same can be done for the begining. This of course gives us an empty result. grep(pattern = &quot;^d&quot;,x = chrvec,value = T) ## character(0) 1.14 Modify We can modify the objects. We will use gsub gsub(pattern = &quot;d&quot;,replacement = &quot;I am replacing d&quot;,x = chrvec) ## [1] &quot;I am a beatufill phrase. Hello worlI am replacing d&quot; ## [2] &quot;abcI am replacing de&quot; ## [3] &quot;67&quot; 1.15 Useful resources R for data science: https://r4ds.had.co.nz A package to learn R 1.16 Activity: Create a new funciton that has inside a for loop and other that has an if/else condition. plus.one.onlyifpos &lt;- function(n){ if(n &gt; 0){ return(n+1) } else { return(&quot;number is negative&quot;) } } plus.one.onlyifpos(20) plus.one.onlyifpos(-20) "],
["data-manipulation.html", "Lab 2 Data manipulation 2.1 Objectives 2.2 Introduction 2.3 Load data 2.4 Data exploration 2.5 Subsetting", " Lab 2 Data manipulation 2.1 Objectives After this section you should be able to: Do data manipulation Do basic statistical analysis and plots 2.2 Introduction One of the main uses of R is for data manipulation and plot. This is similar to what many of us do in any regular table editor as excel or google spread sheet. We will use the following packages. You can read in detail the manual of each of them. #Install packages #install.packages(&quot;ggplot2&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;plyr&quot;) #Load the package library(&quot;ggplot2&quot;) library(&quot;dplyr&quot;) library(&quot;plyr&quot;) library(RColorBrewer) library(car) #Manuals #vignette(&quot;dplyr&quot;) #?ggplot2 #?plyr 2.3 Load data There are many ways to load data. In the following chapters we will use a diverse set of functions to read the data from files. Some of them are: read.table() #general to any type of table read.csv() #specific for comma sepparated tables read.delim() #specific for tab delimited tables Some of the important options of these function are: read.table(file = &quot;location/of/your/file.txt&quot;,sep = &quot;.&quot;,header = T or F) Where the separator can be a comma, dot, etc. You can see more details using: ?read.table In this case we will use data that is already available in R. The package datasets provides a handful set of data to analyze. We will use the ChickWeight dataset. This is data set of weight in chickens with age an different diet. This will allow us to visualize the data and to do some statistic tests. # Install the package #install.packages(&quot;datasets&quot;) # For a full list of these datasets, type library(help = &quot;datasets&quot;) # Load the library and dataset library(datasets) data(ChickWeight) #What happens in the Environment section of RStudio? 2.4 Data exploration It is important to understand the data before heading into the analysis. We will go over some techniques for this. # To see the table, you can click on the environment part or run this... #View(ChickWeight) # As you can see this is a table, just in case we want to convert it to a data.frame ChickWeight&lt;-as.data.frame(ChickWeight) To see only the beginning, we can use the head function: head(ChickWeight) ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 What is n doing? head(ChickWeight,n = 20) ## weight Time Chick Diet ## 1 42 0 1 1 ## 2 51 2 1 1 ## 3 59 4 1 1 ## 4 64 6 1 1 ## 5 76 8 1 1 ## 6 93 10 1 1 ## 7 106 12 1 1 ## 8 125 14 1 1 ## 9 149 16 1 1 ## 10 171 18 1 1 ## 11 199 20 1 1 ## 12 205 21 1 1 ## 13 40 0 2 1 ## 14 49 2 2 1 ## 15 58 4 2 1 ## 16 72 6 2 1 ## 17 84 8 2 1 ## 18 103 10 2 1 ## 19 122 12 2 1 ## 20 138 14 2 1 What is the structure of the data.frame? str(ChickWeight) ## &#39;data.frame&#39;: 578 obs. of 4 variables: ## $ weight: num 42 51 59 64 76 93 106 125 149 171 ... ## $ Time : num 0 2 4 6 8 10 12 14 16 18 ... ## $ Chick : Ord.factor w/ 50 levels &quot;18&quot;&lt;&quot;16&quot;&lt;&quot;15&quot;&lt;..: 15 15 15 15 15 15 15 15 15 15 ... ## $ Diet : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 1 1 1 1 1 1 1 1 1 1 ... With the $ operator we can explore the columns class(ChickWeight$weight) ## [1] &quot;numeric&quot; We can see the dimensions of the table for example: how many rows it has? nrow(ChickWeight) ## [1] 578 How many columns? ncol(ChickWeight) ## [1] 4 The names of columns names(ChickWeight) ## [1] &quot;weight&quot; &quot;Time&quot; &quot;Chick&quot; &quot;Diet&quot; With the [] we can access the individual elements names(ChickWeight)[3] ## [1] &quot;Chick&quot; We can see the levels of a factor levels(ChickWeight$Diet)[1:3] ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; What is the difference if we just print the column? ChickWeight$Diet[1:3] ## [1] 1 1 1 ## Levels: 1 2 3 4 Can we see the levels of a numeric vector? This is a reminder that the data type is important. levels(ChickWeight$weight) # nop We can now get different basic statistics now: mean(ChickWeight$weight) ## [1] 121.8183 summary(ChickWeight$weight) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 35.0 63.0 103.0 121.8 163.8 373.0 summary(ChickWeight) ## weight Time Chick Diet ## Min. : 35.0 Min. : 0.00 13 : 12 1:220 ## 1st Qu.: 63.0 1st Qu.: 4.00 9 : 12 2:120 ## Median :103.0 Median :10.00 20 : 12 3:120 ## Mean :121.8 Mean :10.72 10 : 12 4:118 ## 3rd Qu.:163.8 3rd Qu.:16.00 17 : 12 ## Max. :373.0 Max. :21.00 19 : 12 ## (Other):506 To see what is this exactly doing, just go to the help page: ?summary To save this summary table we can create an object with just the result of the summary chick_sumary&lt;-summary(ChickWeight) chick_sumary ## weight Time Chick Diet ## Min. : 35.0 Min. : 0.00 13 : 12 1:220 ## 1st Qu.: 63.0 1st Qu.: 4.00 9 : 12 2:120 ## Median :103.0 Median :10.00 20 : 12 3:120 ## Mean :121.8 Mean :10.72 10 : 12 4:118 ## 3rd Qu.:163.8 3rd Qu.:16.00 17 : 12 ## Max. :373.0 Max. :21.00 19 : 12 ## (Other):506 class(chick_sumary) ## [1] &quot;table&quot; We can change the data kind, and assign it to a different object chick_sumary_df&lt;-as.data.frame(chick_sumary) This is not that useful as you can see if you inspect the data in using View(chick_sumary_df) this is because it is a complicated format, we better just save the table. We will see other ways to save data in R in the future chapters. You can see more details using: ?write.table write.table(chick_sumary, &quot;mydata.txt&quot;, sep=&quot;\\t&quot;,row.names = F,col.names = T) #this is clearly no perfect but for the important part, the numeric and integer columns, we have the stat 2.5 Subsetting Subsetting means extracting part of the data. There are many different ways to do this. One important notion for tables and data frames is that dimensions go as follows: data[row,column] #we can see specific columns and rows ChickWeight[1,] #row 1 ChickWeight[,1] #col 1 ChickWeight[1,1] #row1, col1 #if we want to know for example only the data from the chickens taking the diet 4 ChickWeight[ChickWeight$Diet==4,] #why == and no =? #in R, = is an assignment, as the &lt;-, while the == is for comparison, lests write ChickWeight$Diet==4 #and class(ChickWeight$Diet==4) #so, when we do ChickWeight[ChickWeight$Diet==4,], R is just showing the ChickWeight for which ChickWeight$Diet==4 is TRUE which(ChickWeight$Diet==4) ChickWeight[ChickWeight$Diet==4,] #and for more conditions: ChickWeight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6,] ChickWeight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6 &amp; ChickWeight$Time&lt;20,] #and if I just want the weights of these... #ChickWeight$weight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6 &amp; ChickWeight$Time&lt;20,] # why this gives an error? because we only have one dimension now, no 2 ChickWeight$weight[ChickWeight$Diet==4 &amp; ChickWeight$Time&gt;6 &amp; ChickWeight$Time&lt;20] ## weight Time Chick Diet ## 1 42 0 1 1 ## [1] 42 51 59 64 76 93 106 125 149 171 199 205 40 49 58 72 84 103 ## [19] 122 138 162 187 209 215 43 39 55 67 84 99 115 138 163 187 198 202 ## [37] 42 49 56 67 74 87 102 108 136 154 160 157 41 42 48 60 79 106 ## [55] 141 164 197 199 220 223 41 49 59 74 97 124 141 148 155 160 160 157 ## [73] 41 49 57 71 89 112 146 174 218 250 288 305 42 50 61 71 84 93 ## [91] 110 116 126 134 125 42 51 59 68 85 96 90 92 93 100 100 98 41 ## [109] 44 52 63 74 81 89 96 101 112 120 124 43 51 63 84 112 139 168 ## [127] 177 182 184 181 175 41 49 56 62 72 88 119 135 162 185 195 205 41 ## [145] 48 53 60 65 67 71 70 71 81 91 96 41 49 62 79 101 128 164 ## [163] 192 227 248 259 266 41 49 56 64 68 68 67 68 41 45 49 51 57 ## [181] 51 54 42 51 61 72 83 89 98 103 113 123 133 142 39 35 43 48 ## [199] 55 62 65 71 82 88 106 120 144 157 41 47 54 58 65 73 77 89 ## [217] 98 107 115 117 40 50 62 86 125 163 217 240 275 307 318 331 41 55 ## [235] 64 77 90 95 108 111 131 148 164 167 43 52 61 73 90 103 127 135 ## [253] 145 163 170 175 42 52 58 74 66 68 70 71 72 72 76 74 40 49 ## [271] 62 78 102 124 146 164 197 231 259 265 42 48 57 74 93 114 136 147 ## [289] 169 205 236 251 39 46 58 73 87 100 115 123 144 163 185 192 39 46 ## [307] 58 73 92 114 145 156 184 207 212 233 39 48 59 74 87 106 134 150 ## [325] 187 230 279 309 42 48 59 72 85 98 115 122 143 151 157 150 42 53 ## [343] 62 73 85 102 123 138 170 204 235 256 41 49 65 82 107 129 159 179 ## [361] 221 263 291 305 39 50 63 77 96 111 137 144 151 146 156 147 41 49 ## [379] 63 85 107 134 164 186 235 294 327 341 41 53 64 87 123 158 201 238 ## [397] 287 332 361 373 39 48 61 76 98 116 145 166 198 227 225 220 41 48 ## [415] 56 68 80 83 103 112 135 157 169 178 41 49 61 74 98 109 128 154 ## [433] 192 232 280 290 42 50 61 78 89 109 130 146 170 214 250 272 41 55 ## [451] 66 79 101 120 154 182 215 262 295 321 42 51 66 85 103 124 155 153 ## [469] 175 184 199 204 42 49 63 84 103 126 160 174 204 234 269 281 42 55 ## [487] 69 96 131 157 184 188 197 198 199 200 42 51 65 86 103 118 127 138 ## [505] 145 146 41 50 61 78 98 117 135 141 147 174 197 196 40 52 62 82 ## [523] 101 120 144 156 173 210 231 238 41 53 66 79 100 123 148 157 168 185 ## [541] 210 205 39 50 62 80 104 125 154 170 222 261 303 322 40 53 64 85 ## [559] 108 128 152 166 184 203 233 237 41 54 67 84 105 122 155 175 205 234 ## [577] 264 264 ## [1] 42 ## weight Time Chick Diet ## 461 42 0 41 4 ## 462 51 2 41 4 ## 463 66 4 41 4 ## 464 85 6 41 4 ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 471 199 20 41 4 ## 472 204 21 41 4 ## 473 42 0 42 4 ## 474 49 2 42 4 ## 475 63 4 42 4 ## 476 84 6 42 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 483 269 20 42 4 ## 484 281 21 42 4 ## 485 42 0 43 4 ## 486 55 2 43 4 ## 487 69 4 43 4 ## 488 96 6 43 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 495 199 20 43 4 ## 496 200 21 43 4 ## 497 42 0 44 4 ## 498 51 2 44 4 ## 499 65 4 44 4 ## 500 86 6 44 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 507 41 0 45 4 ## 508 50 2 45 4 ## 509 61 4 45 4 ## 510 78 6 45 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 517 197 20 45 4 ## 518 196 21 45 4 ## 519 40 0 46 4 ## 520 52 2 46 4 ## 521 62 4 46 4 ## 522 82 6 46 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 529 231 20 46 4 ## 530 238 21 46 4 ## 531 41 0 47 4 ## 532 53 2 47 4 ## 533 66 4 47 4 ## 534 79 6 47 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 541 210 20 47 4 ## 542 205 21 47 4 ## 543 39 0 48 4 ## 544 50 2 48 4 ## 545 62 4 48 4 ## 546 80 6 48 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 553 303 20 48 4 ## 554 322 21 48 4 ## 555 40 0 49 4 ## 556 53 2 49 4 ## 557 64 4 49 4 ## 558 85 6 49 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 565 233 20 49 4 ## 566 237 21 49 4 ## 567 41 0 50 4 ## 568 54 2 50 4 ## 569 67 4 50 4 ## 570 84 6 50 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## 577 264 20 50 4 ## 578 264 21 50 4 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [229] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [241] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [253] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [265] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [277] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [289] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [301] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [313] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [325] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [337] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [349] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [361] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [373] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [385] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [397] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [409] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [421] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [433] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [445] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [457] FALSE FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [469] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [481] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [493] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [505] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [517] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [529] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [541] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [553] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [565] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [577] TRUE TRUE ## [1] &quot;logical&quot; ## [1] 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 ## [19] 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 ## [37] 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 ## [55] 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 ## [73] 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 ## [91] 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 ## [109] 569 570 571 572 573 574 575 576 577 578 ## weight Time Chick Diet ## 461 42 0 41 4 ## 462 51 2 41 4 ## 463 66 4 41 4 ## 464 85 6 41 4 ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 471 199 20 41 4 ## 472 204 21 41 4 ## 473 42 0 42 4 ## 474 49 2 42 4 ## 475 63 4 42 4 ## 476 84 6 42 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 483 269 20 42 4 ## 484 281 21 42 4 ## 485 42 0 43 4 ## 486 55 2 43 4 ## 487 69 4 43 4 ## 488 96 6 43 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 495 199 20 43 4 ## 496 200 21 43 4 ## 497 42 0 44 4 ## 498 51 2 44 4 ## 499 65 4 44 4 ## 500 86 6 44 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 507 41 0 45 4 ## 508 50 2 45 4 ## 509 61 4 45 4 ## 510 78 6 45 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 517 197 20 45 4 ## 518 196 21 45 4 ## 519 40 0 46 4 ## 520 52 2 46 4 ## 521 62 4 46 4 ## 522 82 6 46 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 529 231 20 46 4 ## 530 238 21 46 4 ## 531 41 0 47 4 ## 532 53 2 47 4 ## 533 66 4 47 4 ## 534 79 6 47 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 541 210 20 47 4 ## 542 205 21 47 4 ## 543 39 0 48 4 ## 544 50 2 48 4 ## 545 62 4 48 4 ## 546 80 6 48 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 553 303 20 48 4 ## 554 322 21 48 4 ## 555 40 0 49 4 ## 556 53 2 49 4 ## 557 64 4 49 4 ## 558 85 6 49 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 565 233 20 49 4 ## 566 237 21 49 4 ## 567 41 0 50 4 ## 568 54 2 50 4 ## 569 67 4 50 4 ## 570 84 6 50 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## 577 264 20 50 4 ## 578 264 21 50 4 ## weight Time Chick Diet ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 471 199 20 41 4 ## 472 204 21 41 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 483 269 20 42 4 ## 484 281 21 42 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 495 199 20 43 4 ## 496 200 21 43 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 517 197 20 45 4 ## 518 196 21 45 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 529 231 20 46 4 ## 530 238 21 46 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 541 210 20 47 4 ## 542 205 21 47 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 553 303 20 48 4 ## 554 322 21 48 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 565 233 20 49 4 ## 566 237 21 49 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## 577 264 20 50 4 ## 578 264 21 50 4 ## weight Time Chick Diet ## 465 103 8 41 4 ## 466 124 10 41 4 ## 467 155 12 41 4 ## 468 153 14 41 4 ## 469 175 16 41 4 ## 470 184 18 41 4 ## 477 103 8 42 4 ## 478 126 10 42 4 ## 479 160 12 42 4 ## 480 174 14 42 4 ## 481 204 16 42 4 ## 482 234 18 42 4 ## 489 131 8 43 4 ## 490 157 10 43 4 ## 491 184 12 43 4 ## 492 188 14 43 4 ## 493 197 16 43 4 ## 494 198 18 43 4 ## 501 103 8 44 4 ## 502 118 10 44 4 ## 503 127 12 44 4 ## 504 138 14 44 4 ## 505 145 16 44 4 ## 506 146 18 44 4 ## 511 98 8 45 4 ## 512 117 10 45 4 ## 513 135 12 45 4 ## 514 141 14 45 4 ## 515 147 16 45 4 ## 516 174 18 45 4 ## 523 101 8 46 4 ## 524 120 10 46 4 ## 525 144 12 46 4 ## 526 156 14 46 4 ## 527 173 16 46 4 ## 528 210 18 46 4 ## 535 100 8 47 4 ## 536 123 10 47 4 ## 537 148 12 47 4 ## 538 157 14 47 4 ## 539 168 16 47 4 ## 540 185 18 47 4 ## 547 104 8 48 4 ## 548 125 10 48 4 ## 549 154 12 48 4 ## 550 170 14 48 4 ## 551 222 16 48 4 ## 552 261 18 48 4 ## 559 108 8 49 4 ## 560 128 10 49 4 ## 561 152 12 49 4 ## 562 166 14 49 4 ## 563 184 16 49 4 ## 564 203 18 49 4 ## 571 105 8 50 4 ## 572 122 10 50 4 ## 573 155 12 50 4 ## 574 175 14 50 4 ## 575 205 16 50 4 ## 576 234 18 50 4 ## [1] 103 124 155 153 175 184 103 126 160 174 204 234 131 157 184 188 197 198 103 ## [20] 118 127 138 145 146 98 117 135 141 147 174 101 120 144 156 173 210 100 123 ## [39] 148 157 168 185 104 125 154 170 222 261 108 128 152 166 184 203 105 122 155 ## [58] 175 205 234 "],
["visualization-and-statistical-test.html", "Lab 3 Visualization and Statistical test 3.1 Plots 3.2 Statistical test 3.3 T-test/Wilcoxon 3.4 Activity: 3.5 Resources", " Lab 3 Visualization and Statistical test We will use the same data we already explored in last chapter. Remember: chickens weight, age (Time) for different diets. There are many things we can explore in this data. Each question we might want to answer will be better addressed using different plots. For example: 1. If the chickens are older we expect them to be bigger. This can be visualized using a dotplot. 2. We might want to see the distribution of weight separated by diet. This can be addressed by a histogram. ggplot is a very useful function that allows us to manipulate the colors, the plot type, etc. I know it can be difficult to understand it at the beginning but after a while it becomes really intuitive. Important things to consider: 1. We will be able to plot anything that is a column in the data matrix. 2. Everything is or can be a layer in the plot. 3. When you decide to color or shape by a factor that separates your data this will impact the plot. 3.1 Plots Columns we can plot: names(ChickWeight) ## [1] &quot;weight&quot; &quot;Time&quot; &quot;Chick&quot; &quot;Diet&quot; 3.1.1 Line and points Dot plot with basic qplot (from ggplot but les complex) qplot(data=ChickWeight,x = weight, y=Time, geom = c(&quot;line&quot;,&quot;point&quot;)) Figure 3.1: Point and line plots qplot(data=ChickWeight,x = weight, y=Time, geom = c(&quot;line&quot;,&quot;point&quot;), colour=Diet) #adding the color helps to separate the data Figure 3.2: Point and line plots The same using ggplot ggplot(data = ChickWeight, aes(x = weight, y=Time,colour=Diet))+ #data and basic things about the plot geom_point() + #add the type of plot scale_colour_brewer(palette = &quot;Set1&quot;) #add a colot pallet Figure 3.3: Point and line plots 3.1.2 Historgam and density plots Histograms are used to represent the distribution of a variable over the population. If you want to read more you can go to this link. Other way to represent the same thing is to use cumulative plots we are not going to explore them now but if you are interested in doing them with ggplot you can go to this link Density plots are similar to histograms but implies a more complex treatment of the data. They look like smooth histogram. They are the probability density function of the variable. qplot(data = ChickWeight,x=weight, binwith=10) Figure 3.4: Histogram and Density plots qplot(data = ChickWeight,x=weight, binwith=10, colour=Diet) #the color separates the data Figure 3.5: Histogram and Density plots qplot(data = ChickWeight,x=weight, geom = &quot;density&quot;, colour=Diet) Figure 3.6: Histogram and Density plots With ggplot ggplot(data = ChickWeight, aes(x=weight,color=Diet))+ geom_histogram(fill=&quot;white&quot;, alpha=0.5, position=&quot;identity&quot;)+ scale_colour_brewer(palette = &quot;Set1&quot;) Figure 3.7: Point and line plots ggplot(data = ChickWeight, aes(x=weight,fill=Diet))+ geom_density( alpha=0.5)+ scale_colour_brewer(palette = &quot;Set1&quot;) Figure 3.8: Point and line plots 3.1.3 Boxplot Boxplots are a nice way to visualize the data distribution and to get and intuition of how this is different between conditions. As you can see in this figure, it summarizes a LOT of information: Figure 3.9: Boxplot description. Figrue affapted from https://www.simplypsychology.org/boxplots.html ggplot(data = ChickWeight, aes(y=weight,x=as.factor(Time),fill=Diet))+ #Note how the x, y and color changes geom_boxplot()+ #this is adding the boxplot scale_colour_brewer(palette = &quot;Set1&quot;) Figure 3.10: Boxplot What happens if we do not use the as.factor? Again, a reminder that the data type is important! ggplot(data = ChickWeight, aes(y=weight,x=Time,fill=Diet))+ #Note how the x, y and color changes geom_boxplot()+ #this is adding the boxplot scale_colour_brewer(palette = &quot;Set1&quot;) Figure 3.11: Boxplot It seems interesting to separate this by age (Time). This is achieved by another layer named facet. ggplot(data = ChickWeight, aes(x=weight,fill=Diet))+ geom_density( alpha=0.5)+ scale_colour_brewer(palette = &quot;Set1&quot;)+ facet_wrap(~Time,scales = &quot;free&quot;) Figure 3.12: Plot sepparating by age of the chicken ggplot(data = ChickWeight, aes(y=weight,x=as.factor(Time),fill=Diet))+ geom_boxplot()+scale_colour_brewer(palette = &quot;Set1&quot;)+ facet_wrap(~Time,scales = &quot;free&quot;) Figure 3.13: Plot sepparating by age of the chicken ggplot(data = ChickWeight, aes(y=weight,x=as.factor(Time),fill=Diet))+ geom_violin()+ scale_colour_brewer(palette = &quot;Set1&quot;)+ facet_wrap(~Time,scales = &quot;free&quot;) Figure 3.14: Plot sepparating by age of the chicken 3.2 Statistical test 3.2.1 Descriptive statistics We already saw a way to get the descriptive stats from a table by using summary. We will try to compare the weight of chickens under different diets without taking into account the age. First, we will now do a mean and SD table for each diet. There is one function that can do this for us. ddply is a function that first divides the data by a variable written as .(Var) and then perform an specific function. With the indication of “transform” this will create a new column in out data stat_ChickWeight&lt;-ddply(ChickWeight, .(Diet), transform, Mean=mean(weight,na.rm = T), SD=sd(weight,na.rm = T)) as.data.frame(stat_ChickWeight) ## weight Time Chick Diet Mean SD ## 1 42 0 1 1 102.6455 56.65655 ## 2 51 2 1 1 102.6455 56.65655 ## 3 59 4 1 1 102.6455 56.65655 ## 4 64 6 1 1 102.6455 56.65655 ## 5 76 8 1 1 102.6455 56.65655 ## 6 93 10 1 1 102.6455 56.65655 ## 7 106 12 1 1 102.6455 56.65655 ## 8 125 14 1 1 102.6455 56.65655 ## 9 149 16 1 1 102.6455 56.65655 ## 10 171 18 1 1 102.6455 56.65655 ## 11 199 20 1 1 102.6455 56.65655 ## 12 205 21 1 1 102.6455 56.65655 ## 13 40 0 2 1 102.6455 56.65655 ## 14 49 2 2 1 102.6455 56.65655 ## 15 58 4 2 1 102.6455 56.65655 ## 16 72 6 2 1 102.6455 56.65655 ## 17 84 8 2 1 102.6455 56.65655 ## 18 103 10 2 1 102.6455 56.65655 ## 19 122 12 2 1 102.6455 56.65655 ## 20 138 14 2 1 102.6455 56.65655 ## 21 162 16 2 1 102.6455 56.65655 ## 22 187 18 2 1 102.6455 56.65655 ## 23 209 20 2 1 102.6455 56.65655 ## 24 215 21 2 1 102.6455 56.65655 ## 25 43 0 3 1 102.6455 56.65655 ## 26 39 2 3 1 102.6455 56.65655 ## 27 55 4 3 1 102.6455 56.65655 ## 28 67 6 3 1 102.6455 56.65655 ## 29 84 8 3 1 102.6455 56.65655 ## 30 99 10 3 1 102.6455 56.65655 ## 31 115 12 3 1 102.6455 56.65655 ## 32 138 14 3 1 102.6455 56.65655 ## 33 163 16 3 1 102.6455 56.65655 ## 34 187 18 3 1 102.6455 56.65655 ## 35 198 20 3 1 102.6455 56.65655 ## 36 202 21 3 1 102.6455 56.65655 ## 37 42 0 4 1 102.6455 56.65655 ## 38 49 2 4 1 102.6455 56.65655 ## 39 56 4 4 1 102.6455 56.65655 ## 40 67 6 4 1 102.6455 56.65655 ## 41 74 8 4 1 102.6455 56.65655 ## 42 87 10 4 1 102.6455 56.65655 ## 43 102 12 4 1 102.6455 56.65655 ## 44 108 14 4 1 102.6455 56.65655 ## 45 136 16 4 1 102.6455 56.65655 ## 46 154 18 4 1 102.6455 56.65655 ## 47 160 20 4 1 102.6455 56.65655 ## 48 157 21 4 1 102.6455 56.65655 ## 49 41 0 5 1 102.6455 56.65655 ## 50 42 2 5 1 102.6455 56.65655 ## 51 48 4 5 1 102.6455 56.65655 ## 52 60 6 5 1 102.6455 56.65655 ## 53 79 8 5 1 102.6455 56.65655 ## 54 106 10 5 1 102.6455 56.65655 ## 55 141 12 5 1 102.6455 56.65655 ## 56 164 14 5 1 102.6455 56.65655 ## 57 197 16 5 1 102.6455 56.65655 ## 58 199 18 5 1 102.6455 56.65655 ## 59 220 20 5 1 102.6455 56.65655 ## 60 223 21 5 1 102.6455 56.65655 ## 61 41 0 6 1 102.6455 56.65655 ## 62 49 2 6 1 102.6455 56.65655 ## 63 59 4 6 1 102.6455 56.65655 ## 64 74 6 6 1 102.6455 56.65655 ## 65 97 8 6 1 102.6455 56.65655 ## 66 124 10 6 1 102.6455 56.65655 ## 67 141 12 6 1 102.6455 56.65655 ## 68 148 14 6 1 102.6455 56.65655 ## 69 155 16 6 1 102.6455 56.65655 ## 70 160 18 6 1 102.6455 56.65655 ## 71 160 20 6 1 102.6455 56.65655 ## 72 157 21 6 1 102.6455 56.65655 ## 73 41 0 7 1 102.6455 56.65655 ## 74 49 2 7 1 102.6455 56.65655 ## 75 57 4 7 1 102.6455 56.65655 ## 76 71 6 7 1 102.6455 56.65655 ## 77 89 8 7 1 102.6455 56.65655 ## 78 112 10 7 1 102.6455 56.65655 ## 79 146 12 7 1 102.6455 56.65655 ## 80 174 14 7 1 102.6455 56.65655 ## 81 218 16 7 1 102.6455 56.65655 ## 82 250 18 7 1 102.6455 56.65655 ## 83 288 20 7 1 102.6455 56.65655 ## 84 305 21 7 1 102.6455 56.65655 ## 85 42 0 8 1 102.6455 56.65655 ## 86 50 2 8 1 102.6455 56.65655 ## 87 61 4 8 1 102.6455 56.65655 ## 88 71 6 8 1 102.6455 56.65655 ## 89 84 8 8 1 102.6455 56.65655 ## 90 93 10 8 1 102.6455 56.65655 ## 91 110 12 8 1 102.6455 56.65655 ## 92 116 14 8 1 102.6455 56.65655 ## 93 126 16 8 1 102.6455 56.65655 ## 94 134 18 8 1 102.6455 56.65655 ## 95 125 20 8 1 102.6455 56.65655 ## 96 42 0 9 1 102.6455 56.65655 ## 97 51 2 9 1 102.6455 56.65655 ## 98 59 4 9 1 102.6455 56.65655 ## 99 68 6 9 1 102.6455 56.65655 ## 100 85 8 9 1 102.6455 56.65655 ## 101 96 10 9 1 102.6455 56.65655 ## 102 90 12 9 1 102.6455 56.65655 ## 103 92 14 9 1 102.6455 56.65655 ## 104 93 16 9 1 102.6455 56.65655 ## 105 100 18 9 1 102.6455 56.65655 ## 106 100 20 9 1 102.6455 56.65655 ## 107 98 21 9 1 102.6455 56.65655 ## 108 41 0 10 1 102.6455 56.65655 ## 109 44 2 10 1 102.6455 56.65655 ## 110 52 4 10 1 102.6455 56.65655 ## 111 63 6 10 1 102.6455 56.65655 ## 112 74 8 10 1 102.6455 56.65655 ## 113 81 10 10 1 102.6455 56.65655 ## 114 89 12 10 1 102.6455 56.65655 ## 115 96 14 10 1 102.6455 56.65655 ## 116 101 16 10 1 102.6455 56.65655 ## 117 112 18 10 1 102.6455 56.65655 ## 118 120 20 10 1 102.6455 56.65655 ## 119 124 21 10 1 102.6455 56.65655 ## 120 43 0 11 1 102.6455 56.65655 ## 121 51 2 11 1 102.6455 56.65655 ## 122 63 4 11 1 102.6455 56.65655 ## 123 84 6 11 1 102.6455 56.65655 ## 124 112 8 11 1 102.6455 56.65655 ## 125 139 10 11 1 102.6455 56.65655 ## 126 168 12 11 1 102.6455 56.65655 ## 127 177 14 11 1 102.6455 56.65655 ## 128 182 16 11 1 102.6455 56.65655 ## 129 184 18 11 1 102.6455 56.65655 ## 130 181 20 11 1 102.6455 56.65655 ## 131 175 21 11 1 102.6455 56.65655 ## 132 41 0 12 1 102.6455 56.65655 ## 133 49 2 12 1 102.6455 56.65655 ## 134 56 4 12 1 102.6455 56.65655 ## 135 62 6 12 1 102.6455 56.65655 ## 136 72 8 12 1 102.6455 56.65655 ## 137 88 10 12 1 102.6455 56.65655 ## 138 119 12 12 1 102.6455 56.65655 ## 139 135 14 12 1 102.6455 56.65655 ## 140 162 16 12 1 102.6455 56.65655 ## 141 185 18 12 1 102.6455 56.65655 ## 142 195 20 12 1 102.6455 56.65655 ## 143 205 21 12 1 102.6455 56.65655 ## 144 41 0 13 1 102.6455 56.65655 ## 145 48 2 13 1 102.6455 56.65655 ## 146 53 4 13 1 102.6455 56.65655 ## 147 60 6 13 1 102.6455 56.65655 ## 148 65 8 13 1 102.6455 56.65655 ## 149 67 10 13 1 102.6455 56.65655 ## 150 71 12 13 1 102.6455 56.65655 ## 151 70 14 13 1 102.6455 56.65655 ## 152 71 16 13 1 102.6455 56.65655 ## 153 81 18 13 1 102.6455 56.65655 ## 154 91 20 13 1 102.6455 56.65655 ## 155 96 21 13 1 102.6455 56.65655 ## 156 41 0 14 1 102.6455 56.65655 ## 157 49 2 14 1 102.6455 56.65655 ## 158 62 4 14 1 102.6455 56.65655 ## 159 79 6 14 1 102.6455 56.65655 ## 160 101 8 14 1 102.6455 56.65655 ## 161 128 10 14 1 102.6455 56.65655 ## 162 164 12 14 1 102.6455 56.65655 ## 163 192 14 14 1 102.6455 56.65655 ## 164 227 16 14 1 102.6455 56.65655 ## 165 248 18 14 1 102.6455 56.65655 ## 166 259 20 14 1 102.6455 56.65655 ## 167 266 21 14 1 102.6455 56.65655 ## 168 41 0 15 1 102.6455 56.65655 ## 169 49 2 15 1 102.6455 56.65655 ## 170 56 4 15 1 102.6455 56.65655 ## 171 64 6 15 1 102.6455 56.65655 ## 172 68 8 15 1 102.6455 56.65655 ## 173 68 10 15 1 102.6455 56.65655 ## 174 67 12 15 1 102.6455 56.65655 ## 175 68 14 15 1 102.6455 56.65655 ## 176 41 0 16 1 102.6455 56.65655 ## 177 45 2 16 1 102.6455 56.65655 ## 178 49 4 16 1 102.6455 56.65655 ## 179 51 6 16 1 102.6455 56.65655 ## 180 57 8 16 1 102.6455 56.65655 ## 181 51 10 16 1 102.6455 56.65655 ## 182 54 12 16 1 102.6455 56.65655 ## 183 42 0 17 1 102.6455 56.65655 ## 184 51 2 17 1 102.6455 56.65655 ## 185 61 4 17 1 102.6455 56.65655 ## 186 72 6 17 1 102.6455 56.65655 ## 187 83 8 17 1 102.6455 56.65655 ## 188 89 10 17 1 102.6455 56.65655 ## 189 98 12 17 1 102.6455 56.65655 ## 190 103 14 17 1 102.6455 56.65655 ## 191 113 16 17 1 102.6455 56.65655 ## 192 123 18 17 1 102.6455 56.65655 ## 193 133 20 17 1 102.6455 56.65655 ## 194 142 21 17 1 102.6455 56.65655 ## 195 39 0 18 1 102.6455 56.65655 ## 196 35 2 18 1 102.6455 56.65655 ## 197 43 0 19 1 102.6455 56.65655 ## 198 48 2 19 1 102.6455 56.65655 ## 199 55 4 19 1 102.6455 56.65655 ## 200 62 6 19 1 102.6455 56.65655 ## 201 65 8 19 1 102.6455 56.65655 ## 202 71 10 19 1 102.6455 56.65655 ## 203 82 12 19 1 102.6455 56.65655 ## 204 88 14 19 1 102.6455 56.65655 ## 205 106 16 19 1 102.6455 56.65655 ## 206 120 18 19 1 102.6455 56.65655 ## 207 144 20 19 1 102.6455 56.65655 ## 208 157 21 19 1 102.6455 56.65655 ## 209 41 0 20 1 102.6455 56.65655 ## 210 47 2 20 1 102.6455 56.65655 ## 211 54 4 20 1 102.6455 56.65655 ## 212 58 6 20 1 102.6455 56.65655 ## 213 65 8 20 1 102.6455 56.65655 ## 214 73 10 20 1 102.6455 56.65655 ## 215 77 12 20 1 102.6455 56.65655 ## 216 89 14 20 1 102.6455 56.65655 ## 217 98 16 20 1 102.6455 56.65655 ## 218 107 18 20 1 102.6455 56.65655 ## 219 115 20 20 1 102.6455 56.65655 ## 220 117 21 20 1 102.6455 56.65655 ## 221 40 0 21 2 122.6167 71.60749 ## 222 50 2 21 2 122.6167 71.60749 ## 223 62 4 21 2 122.6167 71.60749 ## 224 86 6 21 2 122.6167 71.60749 ## 225 125 8 21 2 122.6167 71.60749 ## 226 163 10 21 2 122.6167 71.60749 ## 227 217 12 21 2 122.6167 71.60749 ## 228 240 14 21 2 122.6167 71.60749 ## 229 275 16 21 2 122.6167 71.60749 ## 230 307 18 21 2 122.6167 71.60749 ## 231 318 20 21 2 122.6167 71.60749 ## 232 331 21 21 2 122.6167 71.60749 ## 233 41 0 22 2 122.6167 71.60749 ## 234 55 2 22 2 122.6167 71.60749 ## 235 64 4 22 2 122.6167 71.60749 ## 236 77 6 22 2 122.6167 71.60749 ## 237 90 8 22 2 122.6167 71.60749 ## 238 95 10 22 2 122.6167 71.60749 ## 239 108 12 22 2 122.6167 71.60749 ## 240 111 14 22 2 122.6167 71.60749 ## 241 131 16 22 2 122.6167 71.60749 ## 242 148 18 22 2 122.6167 71.60749 ## 243 164 20 22 2 122.6167 71.60749 ## 244 167 21 22 2 122.6167 71.60749 ## 245 43 0 23 2 122.6167 71.60749 ## 246 52 2 23 2 122.6167 71.60749 ## 247 61 4 23 2 122.6167 71.60749 ## 248 73 6 23 2 122.6167 71.60749 ## 249 90 8 23 2 122.6167 71.60749 ## 250 103 10 23 2 122.6167 71.60749 ## 251 127 12 23 2 122.6167 71.60749 ## 252 135 14 23 2 122.6167 71.60749 ## 253 145 16 23 2 122.6167 71.60749 ## 254 163 18 23 2 122.6167 71.60749 ## 255 170 20 23 2 122.6167 71.60749 ## 256 175 21 23 2 122.6167 71.60749 ## 257 42 0 24 2 122.6167 71.60749 ## 258 52 2 24 2 122.6167 71.60749 ## 259 58 4 24 2 122.6167 71.60749 ## 260 74 6 24 2 122.6167 71.60749 ## 261 66 8 24 2 122.6167 71.60749 ## 262 68 10 24 2 122.6167 71.60749 ## 263 70 12 24 2 122.6167 71.60749 ## 264 71 14 24 2 122.6167 71.60749 ## 265 72 16 24 2 122.6167 71.60749 ## 266 72 18 24 2 122.6167 71.60749 ## 267 76 20 24 2 122.6167 71.60749 ## 268 74 21 24 2 122.6167 71.60749 ## 269 40 0 25 2 122.6167 71.60749 ## 270 49 2 25 2 122.6167 71.60749 ## 271 62 4 25 2 122.6167 71.60749 ## 272 78 6 25 2 122.6167 71.60749 ## 273 102 8 25 2 122.6167 71.60749 ## 274 124 10 25 2 122.6167 71.60749 ## 275 146 12 25 2 122.6167 71.60749 ## 276 164 14 25 2 122.6167 71.60749 ## 277 197 16 25 2 122.6167 71.60749 ## 278 231 18 25 2 122.6167 71.60749 ## 279 259 20 25 2 122.6167 71.60749 ## 280 265 21 25 2 122.6167 71.60749 ## 281 42 0 26 2 122.6167 71.60749 ## 282 48 2 26 2 122.6167 71.60749 ## 283 57 4 26 2 122.6167 71.60749 ## 284 74 6 26 2 122.6167 71.60749 ## 285 93 8 26 2 122.6167 71.60749 ## 286 114 10 26 2 122.6167 71.60749 ## 287 136 12 26 2 122.6167 71.60749 ## 288 147 14 26 2 122.6167 71.60749 ## 289 169 16 26 2 122.6167 71.60749 ## 290 205 18 26 2 122.6167 71.60749 ## 291 236 20 26 2 122.6167 71.60749 ## 292 251 21 26 2 122.6167 71.60749 ## 293 39 0 27 2 122.6167 71.60749 ## 294 46 2 27 2 122.6167 71.60749 ## 295 58 4 27 2 122.6167 71.60749 ## 296 73 6 27 2 122.6167 71.60749 ## 297 87 8 27 2 122.6167 71.60749 ## 298 100 10 27 2 122.6167 71.60749 ## 299 115 12 27 2 122.6167 71.60749 ## 300 123 14 27 2 122.6167 71.60749 ## 301 144 16 27 2 122.6167 71.60749 ## 302 163 18 27 2 122.6167 71.60749 ## 303 185 20 27 2 122.6167 71.60749 ## 304 192 21 27 2 122.6167 71.60749 ## 305 39 0 28 2 122.6167 71.60749 ## 306 46 2 28 2 122.6167 71.60749 ## 307 58 4 28 2 122.6167 71.60749 ## 308 73 6 28 2 122.6167 71.60749 ## 309 92 8 28 2 122.6167 71.60749 ## 310 114 10 28 2 122.6167 71.60749 ## 311 145 12 28 2 122.6167 71.60749 ## 312 156 14 28 2 122.6167 71.60749 ## 313 184 16 28 2 122.6167 71.60749 ## 314 207 18 28 2 122.6167 71.60749 ## 315 212 20 28 2 122.6167 71.60749 ## 316 233 21 28 2 122.6167 71.60749 ## 317 39 0 29 2 122.6167 71.60749 ## 318 48 2 29 2 122.6167 71.60749 ## 319 59 4 29 2 122.6167 71.60749 ## 320 74 6 29 2 122.6167 71.60749 ## 321 87 8 29 2 122.6167 71.60749 ## 322 106 10 29 2 122.6167 71.60749 ## 323 134 12 29 2 122.6167 71.60749 ## 324 150 14 29 2 122.6167 71.60749 ## 325 187 16 29 2 122.6167 71.60749 ## 326 230 18 29 2 122.6167 71.60749 ## 327 279 20 29 2 122.6167 71.60749 ## 328 309 21 29 2 122.6167 71.60749 ## 329 42 0 30 2 122.6167 71.60749 ## 330 48 2 30 2 122.6167 71.60749 ## 331 59 4 30 2 122.6167 71.60749 ## 332 72 6 30 2 122.6167 71.60749 ## 333 85 8 30 2 122.6167 71.60749 ## 334 98 10 30 2 122.6167 71.60749 ## 335 115 12 30 2 122.6167 71.60749 ## 336 122 14 30 2 122.6167 71.60749 ## 337 143 16 30 2 122.6167 71.60749 ## 338 151 18 30 2 122.6167 71.60749 ## 339 157 20 30 2 122.6167 71.60749 ## 340 150 21 30 2 122.6167 71.60749 ## 341 42 0 31 3 142.9500 86.54176 ## 342 53 2 31 3 142.9500 86.54176 ## 343 62 4 31 3 142.9500 86.54176 ## 344 73 6 31 3 142.9500 86.54176 ## 345 85 8 31 3 142.9500 86.54176 ## 346 102 10 31 3 142.9500 86.54176 ## 347 123 12 31 3 142.9500 86.54176 ## 348 138 14 31 3 142.9500 86.54176 ## 349 170 16 31 3 142.9500 86.54176 ## 350 204 18 31 3 142.9500 86.54176 ## 351 235 20 31 3 142.9500 86.54176 ## 352 256 21 31 3 142.9500 86.54176 ## 353 41 0 32 3 142.9500 86.54176 ## 354 49 2 32 3 142.9500 86.54176 ## 355 65 4 32 3 142.9500 86.54176 ## 356 82 6 32 3 142.9500 86.54176 ## 357 107 8 32 3 142.9500 86.54176 ## 358 129 10 32 3 142.9500 86.54176 ## 359 159 12 32 3 142.9500 86.54176 ## 360 179 14 32 3 142.9500 86.54176 ## 361 221 16 32 3 142.9500 86.54176 ## 362 263 18 32 3 142.9500 86.54176 ## 363 291 20 32 3 142.9500 86.54176 ## 364 305 21 32 3 142.9500 86.54176 ## 365 39 0 33 3 142.9500 86.54176 ## 366 50 2 33 3 142.9500 86.54176 ## 367 63 4 33 3 142.9500 86.54176 ## 368 77 6 33 3 142.9500 86.54176 ## 369 96 8 33 3 142.9500 86.54176 ## 370 111 10 33 3 142.9500 86.54176 ## 371 137 12 33 3 142.9500 86.54176 ## 372 144 14 33 3 142.9500 86.54176 ## 373 151 16 33 3 142.9500 86.54176 ## 374 146 18 33 3 142.9500 86.54176 ## 375 156 20 33 3 142.9500 86.54176 ## 376 147 21 33 3 142.9500 86.54176 ## 377 41 0 34 3 142.9500 86.54176 ## 378 49 2 34 3 142.9500 86.54176 ## 379 63 4 34 3 142.9500 86.54176 ## 380 85 6 34 3 142.9500 86.54176 ## 381 107 8 34 3 142.9500 86.54176 ## 382 134 10 34 3 142.9500 86.54176 ## 383 164 12 34 3 142.9500 86.54176 ## 384 186 14 34 3 142.9500 86.54176 ## 385 235 16 34 3 142.9500 86.54176 ## 386 294 18 34 3 142.9500 86.54176 ## 387 327 20 34 3 142.9500 86.54176 ## 388 341 21 34 3 142.9500 86.54176 ## 389 41 0 35 3 142.9500 86.54176 ## 390 53 2 35 3 142.9500 86.54176 ## 391 64 4 35 3 142.9500 86.54176 ## 392 87 6 35 3 142.9500 86.54176 ## 393 123 8 35 3 142.9500 86.54176 ## 394 158 10 35 3 142.9500 86.54176 ## 395 201 12 35 3 142.9500 86.54176 ## 396 238 14 35 3 142.9500 86.54176 ## 397 287 16 35 3 142.9500 86.54176 ## 398 332 18 35 3 142.9500 86.54176 ## 399 361 20 35 3 142.9500 86.54176 ## 400 373 21 35 3 142.9500 86.54176 ## 401 39 0 36 3 142.9500 86.54176 ## 402 48 2 36 3 142.9500 86.54176 ## 403 61 4 36 3 142.9500 86.54176 ## 404 76 6 36 3 142.9500 86.54176 ## 405 98 8 36 3 142.9500 86.54176 ## 406 116 10 36 3 142.9500 86.54176 ## 407 145 12 36 3 142.9500 86.54176 ## 408 166 14 36 3 142.9500 86.54176 ## 409 198 16 36 3 142.9500 86.54176 ## 410 227 18 36 3 142.9500 86.54176 ## 411 225 20 36 3 142.9500 86.54176 ## 412 220 21 36 3 142.9500 86.54176 ## 413 41 0 37 3 142.9500 86.54176 ## 414 48 2 37 3 142.9500 86.54176 ## 415 56 4 37 3 142.9500 86.54176 ## 416 68 6 37 3 142.9500 86.54176 ## 417 80 8 37 3 142.9500 86.54176 ## 418 83 10 37 3 142.9500 86.54176 ## 419 103 12 37 3 142.9500 86.54176 ## 420 112 14 37 3 142.9500 86.54176 ## 421 135 16 37 3 142.9500 86.54176 ## 422 157 18 37 3 142.9500 86.54176 ## 423 169 20 37 3 142.9500 86.54176 ## 424 178 21 37 3 142.9500 86.54176 ## 425 41 0 38 3 142.9500 86.54176 ## 426 49 2 38 3 142.9500 86.54176 ## 427 61 4 38 3 142.9500 86.54176 ## 428 74 6 38 3 142.9500 86.54176 ## 429 98 8 38 3 142.9500 86.54176 ## 430 109 10 38 3 142.9500 86.54176 ## 431 128 12 38 3 142.9500 86.54176 ## 432 154 14 38 3 142.9500 86.54176 ## 433 192 16 38 3 142.9500 86.54176 ## 434 232 18 38 3 142.9500 86.54176 ## 435 280 20 38 3 142.9500 86.54176 ## 436 290 21 38 3 142.9500 86.54176 ## 437 42 0 39 3 142.9500 86.54176 ## 438 50 2 39 3 142.9500 86.54176 ## 439 61 4 39 3 142.9500 86.54176 ## 440 78 6 39 3 142.9500 86.54176 ## 441 89 8 39 3 142.9500 86.54176 ## 442 109 10 39 3 142.9500 86.54176 ## 443 130 12 39 3 142.9500 86.54176 ## 444 146 14 39 3 142.9500 86.54176 ## 445 170 16 39 3 142.9500 86.54176 ## 446 214 18 39 3 142.9500 86.54176 ## 447 250 20 39 3 142.9500 86.54176 ## 448 272 21 39 3 142.9500 86.54176 ## 449 41 0 40 3 142.9500 86.54176 ## 450 55 2 40 3 142.9500 86.54176 ## 451 66 4 40 3 142.9500 86.54176 ## 452 79 6 40 3 142.9500 86.54176 ## 453 101 8 40 3 142.9500 86.54176 ## 454 120 10 40 3 142.9500 86.54176 ## 455 154 12 40 3 142.9500 86.54176 ## 456 182 14 40 3 142.9500 86.54176 ## 457 215 16 40 3 142.9500 86.54176 ## 458 262 18 40 3 142.9500 86.54176 ## 459 295 20 40 3 142.9500 86.54176 ## 460 321 21 40 3 142.9500 86.54176 ## 461 42 0 41 4 135.2627 68.82871 ## 462 51 2 41 4 135.2627 68.82871 ## 463 66 4 41 4 135.2627 68.82871 ## 464 85 6 41 4 135.2627 68.82871 ## 465 103 8 41 4 135.2627 68.82871 ## 466 124 10 41 4 135.2627 68.82871 ## 467 155 12 41 4 135.2627 68.82871 ## 468 153 14 41 4 135.2627 68.82871 ## 469 175 16 41 4 135.2627 68.82871 ## 470 184 18 41 4 135.2627 68.82871 ## 471 199 20 41 4 135.2627 68.82871 ## 472 204 21 41 4 135.2627 68.82871 ## 473 42 0 42 4 135.2627 68.82871 ## 474 49 2 42 4 135.2627 68.82871 ## 475 63 4 42 4 135.2627 68.82871 ## 476 84 6 42 4 135.2627 68.82871 ## 477 103 8 42 4 135.2627 68.82871 ## 478 126 10 42 4 135.2627 68.82871 ## 479 160 12 42 4 135.2627 68.82871 ## 480 174 14 42 4 135.2627 68.82871 ## 481 204 16 42 4 135.2627 68.82871 ## 482 234 18 42 4 135.2627 68.82871 ## 483 269 20 42 4 135.2627 68.82871 ## 484 281 21 42 4 135.2627 68.82871 ## 485 42 0 43 4 135.2627 68.82871 ## 486 55 2 43 4 135.2627 68.82871 ## 487 69 4 43 4 135.2627 68.82871 ## 488 96 6 43 4 135.2627 68.82871 ## 489 131 8 43 4 135.2627 68.82871 ## 490 157 10 43 4 135.2627 68.82871 ## 491 184 12 43 4 135.2627 68.82871 ## 492 188 14 43 4 135.2627 68.82871 ## 493 197 16 43 4 135.2627 68.82871 ## 494 198 18 43 4 135.2627 68.82871 ## 495 199 20 43 4 135.2627 68.82871 ## 496 200 21 43 4 135.2627 68.82871 ## 497 42 0 44 4 135.2627 68.82871 ## 498 51 2 44 4 135.2627 68.82871 ## 499 65 4 44 4 135.2627 68.82871 ## 500 86 6 44 4 135.2627 68.82871 ## 501 103 8 44 4 135.2627 68.82871 ## 502 118 10 44 4 135.2627 68.82871 ## 503 127 12 44 4 135.2627 68.82871 ## 504 138 14 44 4 135.2627 68.82871 ## 505 145 16 44 4 135.2627 68.82871 ## 506 146 18 44 4 135.2627 68.82871 ## 507 41 0 45 4 135.2627 68.82871 ## 508 50 2 45 4 135.2627 68.82871 ## 509 61 4 45 4 135.2627 68.82871 ## 510 78 6 45 4 135.2627 68.82871 ## 511 98 8 45 4 135.2627 68.82871 ## 512 117 10 45 4 135.2627 68.82871 ## 513 135 12 45 4 135.2627 68.82871 ## 514 141 14 45 4 135.2627 68.82871 ## 515 147 16 45 4 135.2627 68.82871 ## 516 174 18 45 4 135.2627 68.82871 ## 517 197 20 45 4 135.2627 68.82871 ## 518 196 21 45 4 135.2627 68.82871 ## 519 40 0 46 4 135.2627 68.82871 ## 520 52 2 46 4 135.2627 68.82871 ## 521 62 4 46 4 135.2627 68.82871 ## 522 82 6 46 4 135.2627 68.82871 ## 523 101 8 46 4 135.2627 68.82871 ## 524 120 10 46 4 135.2627 68.82871 ## 525 144 12 46 4 135.2627 68.82871 ## 526 156 14 46 4 135.2627 68.82871 ## 527 173 16 46 4 135.2627 68.82871 ## 528 210 18 46 4 135.2627 68.82871 ## 529 231 20 46 4 135.2627 68.82871 ## 530 238 21 46 4 135.2627 68.82871 ## 531 41 0 47 4 135.2627 68.82871 ## 532 53 2 47 4 135.2627 68.82871 ## 533 66 4 47 4 135.2627 68.82871 ## 534 79 6 47 4 135.2627 68.82871 ## 535 100 8 47 4 135.2627 68.82871 ## 536 123 10 47 4 135.2627 68.82871 ## 537 148 12 47 4 135.2627 68.82871 ## 538 157 14 47 4 135.2627 68.82871 ## 539 168 16 47 4 135.2627 68.82871 ## 540 185 18 47 4 135.2627 68.82871 ## 541 210 20 47 4 135.2627 68.82871 ## 542 205 21 47 4 135.2627 68.82871 ## 543 39 0 48 4 135.2627 68.82871 ## 544 50 2 48 4 135.2627 68.82871 ## 545 62 4 48 4 135.2627 68.82871 ## 546 80 6 48 4 135.2627 68.82871 ## 547 104 8 48 4 135.2627 68.82871 ## 548 125 10 48 4 135.2627 68.82871 ## 549 154 12 48 4 135.2627 68.82871 ## 550 170 14 48 4 135.2627 68.82871 ## 551 222 16 48 4 135.2627 68.82871 ## 552 261 18 48 4 135.2627 68.82871 ## 553 303 20 48 4 135.2627 68.82871 ## 554 322 21 48 4 135.2627 68.82871 ## 555 40 0 49 4 135.2627 68.82871 ## 556 53 2 49 4 135.2627 68.82871 ## 557 64 4 49 4 135.2627 68.82871 ## 558 85 6 49 4 135.2627 68.82871 ## 559 108 8 49 4 135.2627 68.82871 ## 560 128 10 49 4 135.2627 68.82871 ## 561 152 12 49 4 135.2627 68.82871 ## 562 166 14 49 4 135.2627 68.82871 ## 563 184 16 49 4 135.2627 68.82871 ## 564 203 18 49 4 135.2627 68.82871 ## 565 233 20 49 4 135.2627 68.82871 ## 566 237 21 49 4 135.2627 68.82871 ## 567 41 0 50 4 135.2627 68.82871 ## 568 54 2 50 4 135.2627 68.82871 ## 569 67 4 50 4 135.2627 68.82871 ## 570 84 6 50 4 135.2627 68.82871 ## 571 105 8 50 4 135.2627 68.82871 ## 572 122 10 50 4 135.2627 68.82871 ## 573 155 12 50 4 135.2627 68.82871 ## 574 175 14 50 4 135.2627 68.82871 ## 575 205 16 50 4 135.2627 68.82871 ## 576 234 18 50 4 135.2627 68.82871 ## 577 264 20 50 4 135.2627 68.82871 ## 578 264 21 50 4 135.2627 68.82871 What happens if instead of “transform” we use “summarize”? Check ?ddply statWeight_ChickWeight&lt;-ddply(ChickWeight, .(Diet), summarise, Mean=mean(weight,na.rm = T), SD=sd(weight,na.rm = T)) as.data.frame(statWeight_ChickWeight) ## Diet Mean SD ## 1 1 102.6455 56.65655 ## 2 2 122.6167 71.60749 ## 3 3 142.9500 86.54176 ## 4 4 135.2627 68.82871 This is usefull for ploting, here a good plot: ggplot(statWeight_ChickWeight, aes(x=Diet, y=Mean, fill=Diet)) + geom_bar(stat=&quot;identity&quot;, position=position_dodge()) + geom_errorbar(aes(ymin=Mean-SD, ymax=Mean+SD), width=.2, position=position_dodge(.9)) Figure 3.15: Boxplot 3.3 T-test/Wilcoxon To compare means we can do a T test but to do this we need to test the assumptions of this test: Normality of the data and Homoscedasticity (ie, the variance is similar between the two groups we want to compare) Question : Is there any significant difference in the weights between diet 1 and 3? Preliminary test to check independent t-test assumptions Assumption 1: Are the two samples independents? Yes, they are two different samples Assumption 2: Are the data from each of the 2 groups follow a normal distribution? Shapiro-Wilk normality test for the different diets shapiro.test(ChickWeight$weight[ChickWeight$Diet==1]) ## ## Shapiro-Wilk normality test ## ## data: ChickWeight$weight[ChickWeight$Diet == 1] ## W = 0.89336, p-value = 2.211e-11 The function with allows us to do a simpler writing with(ChickWeight, shapiro.test(weight[Diet == 1])) ## ## Shapiro-Wilk normality test ## ## data: weight[Diet == 1] ## W = 0.89336, p-value = 2.211e-11 with(ChickWeight, shapiro.test(weight[Diet == 2])) ## ## Shapiro-Wilk normality test ## ## data: weight[Diet == 2] ## W = 0.90399, p-value = 3.159e-07 pvalue &lt; 0.05, these are not normally distributed. We can NOT use t-test here. If we remember the histograms, this makes sense. qplot(data=ChickWeight, x = weight, facets = &quot;Diet&quot;,geom = &quot;density&quot;) Figure 3.16: CAPTION THIS FIGURE!! Assumption 3: Do the two populations have the same variances? We’ll use F-test to test for homogeneity in variances. This is implemented by a function named var.test. This will require you to have which variable you want to test and separated by which variable. This is clearly also not homoscedastic. var.test(weight~ Diet, data = ChickWeight[ChickWeight$Diet %in% c(1,2),]) ## ## F test to compare two variances ## ## data: weight by Diet ## F = 0.62601, num df = 219, denom df = 119, p-value = 0.002928 ## alternative hypothesis: true ratio of variances is not equal to 1 ## 95 percent confidence interval: ## 0.4525703 0.8530014 ## sample estimates: ## ratio of variances ## 0.626013 What happens if you try to run this var.test(weight~ Diet, data = ChickWeight)? We will use then Wilcoxon. wilcox.test(weight~ Diet, data = ChickWeight[ChickWeight$Diet %in% c(1,2),],exact = FALSE) ## ## Wilcoxon rank sum test with continuity correction ## ## data: weight by Diet ## W = 11213, p-value = 0.02181 ## alternative hypothesis: true location shift is not equal to 0 Are them different? 3.3.1 Anova/Kruskal–Wallis Another way to test differences is to do an ANOVA or its non-parametric alternative Kruskal–Wallis. We already know that this data cannot be analyzed using parametric test as anova. But let’s explore just for fun. Let’s check all the diets together # Compute the analysis of variance res.aov &lt;- aov(weight~ Diet, data = ChickWeight) # Summary of the analysis summary(res.aov) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Diet 3 155863 51954 10.81 6.43e-07 *** ## Residuals 574 2758693 4806 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We see that the diet is a significant component of the variance of the data. Now we should know from where it is coming. We need to do a multiple pairwise-comparison. We will use Tukey Honest Significant Difference for this. TukeyHSD(res.aov) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = weight ~ Diet, data = ChickWeight) ## ## $Diet ## diff lwr upr p adj ## 2-1 19.971212 -0.2998092 40.24223 0.0552271 ## 3-1 40.304545 20.0335241 60.57557 0.0000025 ## 4-1 32.617257 12.2353820 52.99913 0.0002501 ## 3-2 20.333333 -2.7268370 43.39350 0.1058474 ## 4-2 12.646045 -10.5116315 35.80372 0.4954239 ## 4-3 -7.687288 -30.8449649 15.47039 0.8277810 However, you should be screaming at me now: I did not check the assumptions! Homogeneity of variances: plot(res.aov, 1) Figure 3.17: CAPTION THIS FIGURE!! leveneTest(weight~ Diet, data = ChickWeight) ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 3 9.6001 3.418e-06 *** ## 574 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We have just found what we already know. The variance is not homogeneous. The variance across groups is statistically significantly different. Normality of the residuals: plot(res.aov, 2) Figure 3.18: CAPTION THIS FIGURE!! # Extract the residuals aov_residuals &lt;- residuals(object = res.aov ) # Run Shapiro-Wilk test shapiro.test(x = aov_residuals ) ## ## Shapiro-Wilk normality test ## ## data: aov_residuals ## W = 0.94065, p-value = 2.014e-14 Non parametric then: kruskal.test(weight~ Diet, data = ChickWeight) ## ## Kruskal-Wallis rank sum test ## ## data: weight by Diet ## Kruskal-Wallis chi-squared = 24.45, df = 3, p-value = 2.012e-05 What would you conclude about this data? 3.4 Activity: Find another thing you want to test with this data. Solve this in a graphical and statistical way. 3.5 Resources Statistics with R: https://cran.r-project.org/doc/contrib/Seefeld_StatsRBio.pdf Stat and plots with R: http://www.sthda.com/english/ "]
]
